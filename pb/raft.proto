// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
// Package raftpb contains definition of raft internal structs, states and
// messages that are not visible to typical dragonboat applications. It is
// required when building your customized LogDB and Raft RPC modules. You
// can safely ignore this package when building dragonboat applications. 
package raftpb;

enum MessageType {
  LocalTick          = 0;
  Election           = 1;
  LeaderHeartbeat    = 2;
  ConfigChangeEvent  = 3;
  NoOP               = 4;
  Ping               = 5;
  Pong               = 6;
  Propose            = 7;
  SnapshotStatus     = 8;
  Unreachable        = 9;
  CheckQuorum        = 10;
  BatchedReadIndex   = 11;
  Replicate          = 12;
  ReplicateResp      = 13;
  RequestVote        = 14;
  RequestVoteResp    = 15;
  InstallSnapshot    = 16;
  Heartbeat          = 17;
  HeartbeatResp      = 18;
  ReadIndex          = 19;
  ReadIndexResp      = 20;
  Quiesce            = 21;
  SnapshotReceived   = 22;
  LeaderTransfer     = 23;
  TimeoutNow         = 24;
  RateLimit          = 25;
  RequestPreVote     = 26;
  RequestPreVoteResp = 27;
}

enum EntryType {
  ApplicationEntry  = 0;
  ConfigChangeEntry = 1;
  EncodedEntry      = 2;
  MetadataEntry     = 3;
}

enum ConfigChangeType {
  AddNode     = 0;
  RemoveNode  = 1;
  AddObserver = 2;
  AddWitness  = 3;
}

enum StateMachineType {
  UnknownStateMachine     = 0;
  RegularStateMachine     = 1;
  ConcurrentStateMachine  = 2;
  OnDiskStateMachine      = 3;
}

enum CompressionType {
  NoCompression = 0;
  Snappy = 1;
}

message Bootstrap {
  map<uint64, string> addresses   = 1;
  bool join              = 2;
  StateMachineType type  = 3;
}

message RaftDataStatus {
  string address       = 1;
  uint32 bin_ver       = 2;
  uint64 hard_hash     = 3;
  string logdb_type    = 4;
  string hostname      = 5;
  uint64 deployment_id = 6;
  uint64 step_worker_count = 7;
  uint64 logdb_shard_count = 8;
  uint64 max_session_count = 9;
  uint64 entry_batch_size  = 10;
}

message State {
  uint64 term   = 1;
  uint64 vote   = 2;
  uint64 commit = 3;
}

message Entry {
  uint64     term         = 1;
  uint64     index        = 2;
  EntryType  type         = 3;
  uint64     key          = 4;
  uint64     client_id    = 5;
  uint64     series_id    = 6;
  uint64     responded_to = 7;
  bytes      cmd          = 8;
}

message EntryBatch {
  repeated Entry entries          = 1;
}

message Membership {
  uint64 config_change_id  = 1;
  map<uint64, string> addresses     = 2;
  map<uint64, bool> removed         = 3;
  map<uint64, string> observers     = 4;
  map<uint64, string> witnesses     = 5;
}

// field id 1 was used for string filename
message SnapshotFile {
  string file_path       = 2;
  uint64 file_size       = 3;
  uint64 file_id         = 4;
  bytes metadata         = 5;
}

// field id 1 was used for string filename
message Snapshot {
  string filepath        = 2;
  uint64 file_size       = 3;
  uint64 index           = 4;  
  uint64 term            = 5;
  Membership membership  = 6;
  repeated SnapshotFile files     = 7;
  bytes checksum         = 8;
  bool dummy             = 9 ;
  uint64 cluster_id      = 10;
  StateMachineType type  = 11;
  bool imported          = 12;
  uint64 on_disk_index   = 13;
  bool witness           = 14;
}

message Message {
  MessageType type        = 1 ;
  uint64      to          = 2 ;
  uint64      from        = 3 ;
  uint64      cluster_id  = 4 ;
  uint64      term        = 5 ;
  uint64      log_term    = 6 ;
  uint64      log_index   = 7 ;
  uint64      commit      = 8 ;
  bool        reject      = 9 ;
  uint64      hint        = 10;
  repeated Entry       entries     = 11;
  Snapshot    snapshot    = 12;
  uint64      hint_high   = 13;
}

message ConfigChange {
  uint64            config_change_id = 1;
  ConfigChangeType  type             = 2;
  uint64            node_id          = 3;
  string            address          = 4;
  bool              initialize       = 5;
}

enum ChecksumType {
  CRC32IEEE   = 0;
  HIGHWAY     = 1;
}

message SnapshotHeader {
  uint64 session_size              = 1;
  uint64 data_store_size           = 2;
  uint64 unreliable_time           = 3;
  string git_version               = 4;
  bytes header_checksum            = 5;
  bytes payload_checksum           = 6;
  ChecksumType checksum_type       = 7;
  uint64 version                   = 8;
  CompressionType compression_type = 9;
}

message MessageBatch {
  repeated Message requests  				= 1;
  uint64 deployment_id     = 2;
  string source_address    = 3;
  uint32 bin_ver           = 4;
}

// field id 11 was used for string filename
message SnapshotChunk {
  uint64 cluster_id        = 1;
  uint64 node_id           = 2;
  uint64 from              = 3;
  uint64 chunk_id          = 4;
  uint64 chunk_size        = 5;
  uint64 chunk_count       = 6;
  bytes data               = 7;
  uint64 index             = 8;
  uint64 term              = 9;
  Membership membership   = 10;
  string filepath         = 12;
  uint64 file_size        = 13;
  uint64 deployment_id    = 14;
  uint64 file_chunk_id    = 15;
  uint64 file_chunk_count = 16;
  SnapshotFile file_info  = 17;
  uint32 bin_ver          = 18;
  uint64 on_disk_index    = 19;
  bool witness            = 20;
}
