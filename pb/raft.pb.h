// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
namespace raftpb {
class Bootstrap;
class BootstrapDefaultTypeInternal;
extern BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
class Bootstrap_AddressesEntry_DoNotUse;
class Bootstrap_AddressesEntry_DoNotUseDefaultTypeInternal;
extern Bootstrap_AddressesEntry_DoNotUseDefaultTypeInternal _Bootstrap_AddressesEntry_DoNotUse_default_instance_;
class ConfigChange;
class ConfigChangeDefaultTypeInternal;
extern ConfigChangeDefaultTypeInternal _ConfigChange_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class EntryBatch;
class EntryBatchDefaultTypeInternal;
extern EntryBatchDefaultTypeInternal _EntryBatch_default_instance_;
class Membership;
class MembershipDefaultTypeInternal;
extern MembershipDefaultTypeInternal _Membership_default_instance_;
class Membership_AddressesEntry_DoNotUse;
class Membership_AddressesEntry_DoNotUseDefaultTypeInternal;
extern Membership_AddressesEntry_DoNotUseDefaultTypeInternal _Membership_AddressesEntry_DoNotUse_default_instance_;
class Membership_ObserversEntry_DoNotUse;
class Membership_ObserversEntry_DoNotUseDefaultTypeInternal;
extern Membership_ObserversEntry_DoNotUseDefaultTypeInternal _Membership_ObserversEntry_DoNotUse_default_instance_;
class Membership_RemovedEntry_DoNotUse;
class Membership_RemovedEntry_DoNotUseDefaultTypeInternal;
extern Membership_RemovedEntry_DoNotUseDefaultTypeInternal _Membership_RemovedEntry_DoNotUse_default_instance_;
class Membership_WitnessesEntry_DoNotUse;
class Membership_WitnessesEntry_DoNotUseDefaultTypeInternal;
extern Membership_WitnessesEntry_DoNotUseDefaultTypeInternal _Membership_WitnessesEntry_DoNotUse_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageBatch;
class MessageBatchDefaultTypeInternal;
extern MessageBatchDefaultTypeInternal _MessageBatch_default_instance_;
class RaftDataStatus;
class RaftDataStatusDefaultTypeInternal;
extern RaftDataStatusDefaultTypeInternal _RaftDataStatus_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotChunk;
class SnapshotChunkDefaultTypeInternal;
extern SnapshotChunkDefaultTypeInternal _SnapshotChunk_default_instance_;
class SnapshotFile;
class SnapshotFileDefaultTypeInternal;
extern SnapshotFileDefaultTypeInternal _SnapshotFile_default_instance_;
class SnapshotHeader;
class SnapshotHeaderDefaultTypeInternal;
extern SnapshotHeaderDefaultTypeInternal _SnapshotHeader_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace raftpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raftpb::Bootstrap* Arena::CreateMaybeMessage<::raftpb::Bootstrap>(Arena*);
template<> ::raftpb::Bootstrap_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage<::raftpb::Bootstrap_AddressesEntry_DoNotUse>(Arena*);
template<> ::raftpb::ConfigChange* Arena::CreateMaybeMessage<::raftpb::ConfigChange>(Arena*);
template<> ::raftpb::Entry* Arena::CreateMaybeMessage<::raftpb::Entry>(Arena*);
template<> ::raftpb::EntryBatch* Arena::CreateMaybeMessage<::raftpb::EntryBatch>(Arena*);
template<> ::raftpb::Membership* Arena::CreateMaybeMessage<::raftpb::Membership>(Arena*);
template<> ::raftpb::Membership_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage<::raftpb::Membership_AddressesEntry_DoNotUse>(Arena*);
template<> ::raftpb::Membership_ObserversEntry_DoNotUse* Arena::CreateMaybeMessage<::raftpb::Membership_ObserversEntry_DoNotUse>(Arena*);
template<> ::raftpb::Membership_RemovedEntry_DoNotUse* Arena::CreateMaybeMessage<::raftpb::Membership_RemovedEntry_DoNotUse>(Arena*);
template<> ::raftpb::Membership_WitnessesEntry_DoNotUse* Arena::CreateMaybeMessage<::raftpb::Membership_WitnessesEntry_DoNotUse>(Arena*);
template<> ::raftpb::Message* Arena::CreateMaybeMessage<::raftpb::Message>(Arena*);
template<> ::raftpb::MessageBatch* Arena::CreateMaybeMessage<::raftpb::MessageBatch>(Arena*);
template<> ::raftpb::RaftDataStatus* Arena::CreateMaybeMessage<::raftpb::RaftDataStatus>(Arena*);
template<> ::raftpb::Snapshot* Arena::CreateMaybeMessage<::raftpb::Snapshot>(Arena*);
template<> ::raftpb::SnapshotChunk* Arena::CreateMaybeMessage<::raftpb::SnapshotChunk>(Arena*);
template<> ::raftpb::SnapshotFile* Arena::CreateMaybeMessage<::raftpb::SnapshotFile>(Arena*);
template<> ::raftpb::SnapshotHeader* Arena::CreateMaybeMessage<::raftpb::SnapshotHeader>(Arena*);
template<> ::raftpb::State* Arena::CreateMaybeMessage<::raftpb::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftpb {

enum MessageType : int {
  LocalTick = 0,
  Election = 1,
  LeaderHeartbeat = 2,
  ConfigChangeEvent = 3,
  NoOP = 4,
  Ping = 5,
  Pong = 6,
  Propose = 7,
  SnapshotStatus = 8,
  Unreachable = 9,
  CheckQuorum = 10,
  BatchedReadIndex = 11,
  Replicate = 12,
  ReplicateResp = 13,
  RequestVote = 14,
  RequestVoteResp = 15,
  InstallSnapshot = 16,
  Heartbeat = 17,
  HeartbeatResp = 18,
  ReadIndex = 19,
  ReadIndexResp = 20,
  Quiesce = 21,
  SnapshotReceived = 22,
  LeaderTransfer = 23,
  TimeoutNow = 24,
  RateLimit = 25,
  RequestPreVote = 26,
  RequestPreVoteResp = 27,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = LocalTick;
constexpr MessageType MessageType_MAX = RequestPreVoteResp;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum EntryType : int {
  ApplicationEntry = 0,
  ConfigChangeEntry = 1,
  EncodedEntry = 2,
  MetadataEntry = 3,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = ApplicationEntry;
constexpr EntryType EntryType_MAX = MetadataEntry;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    const std::string& name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum ConfigChangeType : int {
  AddNode = 0,
  RemoveNode = 1,
  AddObserver = 2,
  AddWitness = 3,
  ConfigChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConfigChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConfigChangeType_IsValid(int value);
constexpr ConfigChangeType ConfigChangeType_MIN = AddNode;
constexpr ConfigChangeType ConfigChangeType_MAX = AddWitness;
constexpr int ConfigChangeType_ARRAYSIZE = ConfigChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigChangeType_descriptor();
template<typename T>
inline const std::string& ConfigChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigChangeType_descriptor(), enum_t_value);
}
inline bool ConfigChangeType_Parse(
    const std::string& name, ConfigChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigChangeType>(
    ConfigChangeType_descriptor(), name, value);
}
enum StateMachineType : int {
  UnknownStateMachine = 0,
  RegularStateMachine = 1,
  ConcurrentStateMachine = 2,
  OnDiskStateMachine = 3,
  StateMachineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateMachineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateMachineType_IsValid(int value);
constexpr StateMachineType StateMachineType_MIN = UnknownStateMachine;
constexpr StateMachineType StateMachineType_MAX = OnDiskStateMachine;
constexpr int StateMachineType_ARRAYSIZE = StateMachineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateMachineType_descriptor();
template<typename T>
inline const std::string& StateMachineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateMachineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateMachineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateMachineType_descriptor(), enum_t_value);
}
inline bool StateMachineType_Parse(
    const std::string& name, StateMachineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateMachineType>(
    StateMachineType_descriptor(), name, value);
}
enum CompressionType : int {
  NoCompression = 0,
  Snappy = 1,
  CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompressionType_IsValid(int value);
constexpr CompressionType CompressionType_MIN = NoCompression;
constexpr CompressionType CompressionType_MAX = Snappy;
constexpr int CompressionType_ARRAYSIZE = CompressionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor();
template<typename T>
inline const std::string& CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressionType_descriptor(), enum_t_value);
}
inline bool CompressionType_Parse(
    const std::string& name, CompressionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressionType>(
    CompressionType_descriptor(), name, value);
}
enum ChecksumType : int {
  CRC32IEEE = 0,
  HIGHWAY = 1,
  ChecksumType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChecksumType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChecksumType_IsValid(int value);
constexpr ChecksumType ChecksumType_MIN = CRC32IEEE;
constexpr ChecksumType ChecksumType_MAX = HIGHWAY;
constexpr int ChecksumType_ARRAYSIZE = ChecksumType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChecksumType_descriptor();
template<typename T>
inline const std::string& ChecksumType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChecksumType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChecksumType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChecksumType_descriptor(), enum_t_value);
}
inline bool ChecksumType_Parse(
    const std::string& name, ChecksumType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChecksumType>(
    ChecksumType_descriptor(), name, value);
}
// ===================================================================

class Bootstrap_AddressesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bootstrap_AddressesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bootstrap_AddressesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Bootstrap_AddressesEntry_DoNotUse();
  Bootstrap_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Bootstrap_AddressesEntry_DoNotUse& other);
  static const Bootstrap_AddressesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Bootstrap_AddressesEntry_DoNotUse*>(&_Bootstrap_AddressesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raftpb.Bootstrap.AddressesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Bootstrap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Bootstrap) */ {
 public:
  Bootstrap();
  virtual ~Bootstrap();

  Bootstrap(const Bootstrap& from);
  Bootstrap(Bootstrap&& from) noexcept
    : Bootstrap() {
    *this = ::std::move(from);
  }

  inline Bootstrap& operator=(const Bootstrap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bootstrap& operator=(Bootstrap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bootstrap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bootstrap* internal_default_instance() {
    return reinterpret_cast<const Bootstrap*>(
               &_Bootstrap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Bootstrap* other);
  friend void swap(Bootstrap& a, Bootstrap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bootstrap* New() const final {
    return CreateMaybeMessage<Bootstrap>(nullptr);
  }

  Bootstrap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bootstrap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bootstrap& from);
  void MergeFrom(const Bootstrap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bootstrap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Bootstrap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, string> addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      addresses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_addresses();

  // bool join = 2;
  void clear_join();
  static const int kJoinFieldNumber = 2;
  bool join() const;
  void set_join(bool value);

  // .raftpb.StateMachineType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::raftpb::StateMachineType type() const;
  void set_type(::raftpb::StateMachineType value);

  // @@protoc_insertion_point(class_scope:raftpb.Bootstrap)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Bootstrap_AddressesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > addresses_;
  bool join_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RaftDataStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.RaftDataStatus) */ {
 public:
  RaftDataStatus();
  virtual ~RaftDataStatus();

  RaftDataStatus(const RaftDataStatus& from);
  RaftDataStatus(RaftDataStatus&& from) noexcept
    : RaftDataStatus() {
    *this = ::std::move(from);
  }

  inline RaftDataStatus& operator=(const RaftDataStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftDataStatus& operator=(RaftDataStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftDataStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftDataStatus* internal_default_instance() {
    return reinterpret_cast<const RaftDataStatus*>(
               &_RaftDataStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RaftDataStatus* other);
  friend void swap(RaftDataStatus& a, RaftDataStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftDataStatus* New() const final {
    return CreateMaybeMessage<RaftDataStatus>(nullptr);
  }

  RaftDataStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftDataStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftDataStatus& from);
  void MergeFrom(const RaftDataStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftDataStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.RaftDataStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string logdb_type = 4;
  void clear_logdb_type();
  static const int kLogdbTypeFieldNumber = 4;
  const std::string& logdb_type() const;
  void set_logdb_type(const std::string& value);
  void set_logdb_type(std::string&& value);
  void set_logdb_type(const char* value);
  void set_logdb_type(const char* value, size_t size);
  std::string* mutable_logdb_type();
  std::string* release_logdb_type();
  void set_allocated_logdb_type(std::string* logdb_type);

  // string hostname = 5;
  void clear_hostname();
  static const int kHostnameFieldNumber = 5;
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);

  // uint64 hard_hash = 3;
  void clear_hard_hash();
  static const int kHardHashFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 hard_hash() const;
  void set_hard_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 deployment_id = 6;
  void clear_deployment_id();
  static const int kDeploymentIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 step_worker_count = 7;
  void clear_step_worker_count();
  static const int kStepWorkerCountFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 step_worker_count() const;
  void set_step_worker_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 logdb_shard_count = 8;
  void clear_logdb_shard_count();
  static const int kLogdbShardCountFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 logdb_shard_count() const;
  void set_logdb_shard_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 max_session_count = 9;
  void clear_max_session_count();
  static const int kMaxSessionCountFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_session_count() const;
  void set_max_session_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 entry_batch_size = 10;
  void clear_entry_batch_size();
  static const int kEntryBatchSizeFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_batch_size() const;
  void set_entry_batch_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 bin_ver = 2;
  void clear_bin_ver();
  static const int kBinVerFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver() const;
  void set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:raftpb.RaftDataStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdb_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hard_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 step_worker_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logdb_shard_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_session_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 entry_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 vote = 2;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote() const;
  void set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.State)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cmd = 8;
  void clear_cmd();
  static const int kCmdFieldNumber = 8;
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const void* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 key = 4;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 series_id = 6;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 series_id() const;
  void set_series_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 responded_to = 7;
  void clear_responded_to();
  static const int kRespondedToFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 responded_to() const;
  void set_responded_to(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .raftpb.EntryType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::raftpb::EntryType type() const;
  void set_type(::raftpb::EntryType value);

  // @@protoc_insertion_point(class_scope:raftpb.Entry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 series_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 responded_to_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class EntryBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.EntryBatch) */ {
 public:
  EntryBatch();
  virtual ~EntryBatch();

  EntryBatch(const EntryBatch& from);
  EntryBatch(EntryBatch&& from) noexcept
    : EntryBatch() {
    *this = ::std::move(from);
  }

  inline EntryBatch& operator=(const EntryBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryBatch& operator=(EntryBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntryBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryBatch* internal_default_instance() {
    return reinterpret_cast<const EntryBatch*>(
               &_EntryBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EntryBatch* other);
  friend void swap(EntryBatch& a, EntryBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntryBatch* New() const final {
    return CreateMaybeMessage<EntryBatch>(nullptr);
  }

  EntryBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntryBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntryBatch& from);
  void MergeFrom(const EntryBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.EntryBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raftpb.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::raftpb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
      mutable_entries();
  const ::raftpb::Entry& entries(int index) const;
  ::raftpb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:raftpb.EntryBatch)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Membership_AddressesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_AddressesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_AddressesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Membership_AddressesEntry_DoNotUse();
  Membership_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Membership_AddressesEntry_DoNotUse& other);
  static const Membership_AddressesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Membership_AddressesEntry_DoNotUse*>(&_Membership_AddressesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raftpb.Membership.AddressesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class Membership_RemovedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_RemovedEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_RemovedEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  Membership_RemovedEntry_DoNotUse();
  Membership_RemovedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Membership_RemovedEntry_DoNotUse& other);
  static const Membership_RemovedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Membership_RemovedEntry_DoNotUse*>(&_Membership_RemovedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Membership_ObserversEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_ObserversEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_ObserversEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Membership_ObserversEntry_DoNotUse();
  Membership_ObserversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Membership_ObserversEntry_DoNotUse& other);
  static const Membership_ObserversEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Membership_ObserversEntry_DoNotUse*>(&_Membership_ObserversEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raftpb.Membership.ObserversEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class Membership_WitnessesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_WitnessesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Membership_WitnessesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Membership_WitnessesEntry_DoNotUse();
  Membership_WitnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Membership_WitnessesEntry_DoNotUse& other);
  static const Membership_WitnessesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Membership_WitnessesEntry_DoNotUse*>(&_Membership_WitnessesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "raftpb.Membership.WitnessesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class Membership :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Membership) */ {
 public:
  Membership();
  virtual ~Membership();

  Membership(const Membership& from);
  Membership(Membership&& from) noexcept
    : Membership() {
    *this = ::std::move(from);
  }

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }
  inline Membership& operator=(Membership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Membership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Membership* internal_default_instance() {
    return reinterpret_cast<const Membership*>(
               &_Membership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Membership* other);
  friend void swap(Membership& a, Membership& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Membership* New() const final {
    return CreateMaybeMessage<Membership>(nullptr);
  }

  Membership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Membership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Membership& from);
  void MergeFrom(const Membership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Membership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Membership";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, string> addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      addresses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_addresses();

  // map<uint64, bool> removed = 3;
  int removed_size() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 3;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >&
      removed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >*
      mutable_removed();

  // map<uint64, string> observers = 4;
  int observers_size() const;
  void clear_observers();
  static const int kObserversFieldNumber = 4;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      observers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_observers();

  // map<uint64, string> witnesses = 5;
  int witnesses_size() const;
  void clear_witnesses();
  static const int kWitnessesFieldNumber = 5;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      witnesses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_witnesses();

  // uint64 config_change_id = 1;
  void clear_config_change_id();
  static const int kConfigChangeIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 config_change_id() const;
  void set_config_change_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.Membership)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Membership_AddressesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Membership_RemovedEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > removed_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Membership_ObserversEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > observers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Membership_WitnessesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > witnesses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 config_change_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class SnapshotFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.SnapshotFile) */ {
 public:
  SnapshotFile();
  virtual ~SnapshotFile();

  SnapshotFile(const SnapshotFile& from);
  SnapshotFile(SnapshotFile&& from) noexcept
    : SnapshotFile() {
    *this = ::std::move(from);
  }

  inline SnapshotFile& operator=(const SnapshotFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotFile& operator=(SnapshotFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotFile* internal_default_instance() {
    return reinterpret_cast<const SnapshotFile*>(
               &_SnapshotFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SnapshotFile* other);
  friend void swap(SnapshotFile& a, SnapshotFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotFile* New() const final {
    return CreateMaybeMessage<SnapshotFile>(nullptr);
  }

  SnapshotFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotFile& from);
  void MergeFrom(const SnapshotFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.SnapshotFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 2;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // bytes metadata = 5;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);

  // uint64 file_size = 3;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_id = 4;
  void clear_file_id();
  static const int kFileIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.SnapshotFile)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Snapshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Snapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raftpb.SnapshotFile files = 7;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 7;
  ::raftpb::SnapshotFile* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::SnapshotFile >*
      mutable_files();
  const ::raftpb::SnapshotFile& files(int index) const;
  ::raftpb::SnapshotFile* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::SnapshotFile >&
      files() const;

  // string filepath = 2;
  void clear_filepath();
  static const int kFilepathFieldNumber = 2;
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);

  // bytes checksum = 8;
  void clear_checksum();
  static const int kChecksumFieldNumber = 8;
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const void* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);

  // .raftpb.Membership membership = 6;
  bool has_membership() const;
  void clear_membership();
  static const int kMembershipFieldNumber = 6;
  const ::raftpb::Membership& membership() const;
  ::raftpb::Membership* release_membership();
  ::raftpb::Membership* mutable_membership();
  void set_allocated_membership(::raftpb::Membership* membership);

  // uint64 file_size = 3;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 5;
  void clear_term();
  static const int kTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 cluster_id = 10;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .raftpb.StateMachineType type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  ::raftpb::StateMachineType type() const;
  void set_type(::raftpb::StateMachineType value);

  // bool dummy = 9;
  void clear_dummy();
  static const int kDummyFieldNumber = 9;
  bool dummy() const;
  void set_dummy(bool value);

  // bool imported = 12;
  void clear_imported();
  static const int kImportedFieldNumber = 12;
  bool imported() const;
  void set_imported(bool value);

  // bool witness = 14;
  void clear_witness();
  static const int kWitnessFieldNumber = 14;
  bool witness() const;
  void set_witness(bool value);

  // uint64 on_disk_index = 13;
  void clear_on_disk_index();
  static const int kOnDiskIndexFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint64 on_disk_index() const;
  void set_on_disk_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.Snapshot)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::SnapshotFile > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  ::raftpb::Membership* membership_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  int type_;
  bool dummy_;
  bool imported_;
  bool witness_;
  ::PROTOBUF_NAMESPACE_ID::uint64 on_disk_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raftpb.Entry entries = 11;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 11;
  ::raftpb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
      mutable_entries();
  const ::raftpb::Entry& entries(int index) const;
  ::raftpb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
      entries() const;

  // .raftpb.Snapshot snapshot = 12;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 12;
  const ::raftpb::Snapshot& snapshot() const;
  ::raftpb::Snapshot* release_snapshot();
  ::raftpb::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::raftpb::Snapshot* snapshot);

  // uint64 to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 cluster_id = 4;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 5;
  void clear_term();
  static const int kTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .raftpb.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raftpb::MessageType type() const;
  void set_type(::raftpb::MessageType value);

  // bool reject = 9;
  void clear_reject();
  static const int kRejectFieldNumber = 9;
  bool reject() const;
  void set_reject(bool value);

  // uint64 log_term = 6;
  void clear_log_term();
  static const int kLogTermFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_term() const;
  void set_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 log_index = 7;
  void clear_log_index();
  static const int kLogIndexFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_index() const;
  void set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 commit = 8;
  void clear_commit();
  static const int kCommitFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 hint = 10;
  void clear_hint();
  static const int kHintFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 hint() const;
  void set_hint(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 hint_high = 13;
  void clear_hint_high();
  static const int kHintHighFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint64 hint_high() const;
  void set_hint_high(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raftpb.Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry > entries_;
  ::raftpb::Snapshot* snapshot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  int type_;
  bool reject_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hint_high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class ConfigChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfigChange) */ {
 public:
  ConfigChange();
  virtual ~ConfigChange();

  ConfigChange(const ConfigChange& from);
  ConfigChange(ConfigChange&& from) noexcept
    : ConfigChange() {
    *this = ::std::move(from);
  }

  inline ConfigChange& operator=(const ConfigChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigChange& operator=(ConfigChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigChange* internal_default_instance() {
    return reinterpret_cast<const ConfigChange*>(
               &_ConfigChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ConfigChange* other);
  friend void swap(ConfigChange& a, ConfigChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigChange* New() const final {
    return CreateMaybeMessage<ConfigChange>(nullptr);
  }

  ConfigChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigChange& from);
  void MergeFrom(const ConfigChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ConfigChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // uint64 config_change_id = 1;
  void clear_config_change_id();
  static const int kConfigChangeIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 config_change_id() const;
  void set_config_change_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .raftpb.ConfigChangeType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::raftpb::ConfigChangeType type() const;
  void set_type(::raftpb::ConfigChangeType value);

  // bool initialize = 5;
  void clear_initialize();
  static const int kInitializeFieldNumber = 5;
  bool initialize() const;
  void set_initialize(bool value);

  // @@protoc_insertion_point(class_scope:raftpb.ConfigChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 config_change_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  int type_;
  bool initialize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class SnapshotHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.SnapshotHeader) */ {
 public:
  SnapshotHeader();
  virtual ~SnapshotHeader();

  SnapshotHeader(const SnapshotHeader& from);
  SnapshotHeader(SnapshotHeader&& from) noexcept
    : SnapshotHeader() {
    *this = ::std::move(from);
  }

  inline SnapshotHeader& operator=(const SnapshotHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotHeader& operator=(SnapshotHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotHeader* internal_default_instance() {
    return reinterpret_cast<const SnapshotHeader*>(
               &_SnapshotHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SnapshotHeader* other);
  friend void swap(SnapshotHeader& a, SnapshotHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotHeader* New() const final {
    return CreateMaybeMessage<SnapshotHeader>(nullptr);
  }

  SnapshotHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotHeader& from);
  void MergeFrom(const SnapshotHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.SnapshotHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string git_version = 4;
  void clear_git_version();
  static const int kGitVersionFieldNumber = 4;
  const std::string& git_version() const;
  void set_git_version(const std::string& value);
  void set_git_version(std::string&& value);
  void set_git_version(const char* value);
  void set_git_version(const char* value, size_t size);
  std::string* mutable_git_version();
  std::string* release_git_version();
  void set_allocated_git_version(std::string* git_version);

  // bytes header_checksum = 5;
  void clear_header_checksum();
  static const int kHeaderChecksumFieldNumber = 5;
  const std::string& header_checksum() const;
  void set_header_checksum(const std::string& value);
  void set_header_checksum(std::string&& value);
  void set_header_checksum(const char* value);
  void set_header_checksum(const void* value, size_t size);
  std::string* mutable_header_checksum();
  std::string* release_header_checksum();
  void set_allocated_header_checksum(std::string* header_checksum);

  // bytes payload_checksum = 6;
  void clear_payload_checksum();
  static const int kPayloadChecksumFieldNumber = 6;
  const std::string& payload_checksum() const;
  void set_payload_checksum(const std::string& value);
  void set_payload_checksum(std::string&& value);
  void set_payload_checksum(const char* value);
  void set_payload_checksum(const void* value, size_t size);
  std::string* mutable_payload_checksum();
  std::string* release_payload_checksum();
  void set_allocated_payload_checksum(std::string* payload_checksum);

  // uint64 session_size = 1;
  void clear_session_size();
  static const int kSessionSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_size() const;
  void set_session_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 data_store_size = 2;
  void clear_data_store_size();
  static const int kDataStoreSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_store_size() const;
  void set_data_store_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 unreliable_time = 3;
  void clear_unreliable_time();
  static const int kUnreliableTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 unreliable_time() const;
  void set_unreliable_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 version = 8;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .raftpb.ChecksumType checksum_type = 7;
  void clear_checksum_type();
  static const int kChecksumTypeFieldNumber = 7;
  ::raftpb::ChecksumType checksum_type() const;
  void set_checksum_type(::raftpb::ChecksumType value);

  // .raftpb.CompressionType compression_type = 9;
  void clear_compression_type();
  static const int kCompressionTypeFieldNumber = 9;
  ::raftpb::CompressionType compression_type() const;
  void set_compression_type(::raftpb::CompressionType value);

  // @@protoc_insertion_point(class_scope:raftpb.SnapshotHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_checksum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_checksum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_store_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unreliable_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  int checksum_type_;
  int compression_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class MessageBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.MessageBatch) */ {
 public:
  MessageBatch();
  virtual ~MessageBatch();

  MessageBatch(const MessageBatch& from);
  MessageBatch(MessageBatch&& from) noexcept
    : MessageBatch() {
    *this = ::std::move(from);
  }

  inline MessageBatch& operator=(const MessageBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBatch& operator=(MessageBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBatch* internal_default_instance() {
    return reinterpret_cast<const MessageBatch*>(
               &_MessageBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MessageBatch* other);
  friend void swap(MessageBatch& a, MessageBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageBatch* New() const final {
    return CreateMaybeMessage<MessageBatch>(nullptr);
  }

  MessageBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBatch& from);
  void MergeFrom(const MessageBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.MessageBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raftpb.Message requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  ::raftpb::Message* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Message >*
      mutable_requests();
  const ::raftpb::Message& requests(int index) const;
  ::raftpb::Message* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Message >&
      requests() const;

  // string source_address = 3;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 3;
  const std::string& source_address() const;
  void set_source_address(const std::string& value);
  void set_source_address(std::string&& value);
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  std::string* mutable_source_address();
  std::string* release_source_address();
  void set_allocated_source_address(std::string* source_address);

  // uint64 deployment_id = 2;
  void clear_deployment_id();
  static const int kDeploymentIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 bin_ver = 4;
  void clear_bin_ver();
  static const int kBinVerFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver() const;
  void set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:raftpb.MessageBatch)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Message > requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class SnapshotChunk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.SnapshotChunk) */ {
 public:
  SnapshotChunk();
  virtual ~SnapshotChunk();

  SnapshotChunk(const SnapshotChunk& from);
  SnapshotChunk(SnapshotChunk&& from) noexcept
    : SnapshotChunk() {
    *this = ::std::move(from);
  }

  inline SnapshotChunk& operator=(const SnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotChunk& operator=(SnapshotChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const SnapshotChunk*>(
               &_SnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SnapshotChunk* other);
  friend void swap(SnapshotChunk& a, SnapshotChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotChunk* New() const final {
    return CreateMaybeMessage<SnapshotChunk>(nullptr);
  }

  SnapshotChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotChunk& from);
  void MergeFrom(const SnapshotChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.SnapshotChunk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // string filepath = 12;
  void clear_filepath();
  static const int kFilepathFieldNumber = 12;
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);

  // .raftpb.Membership membership = 10;
  bool has_membership() const;
  void clear_membership();
  static const int kMembershipFieldNumber = 10;
  const ::raftpb::Membership& membership() const;
  ::raftpb::Membership* release_membership();
  ::raftpb::Membership* mutable_membership();
  void set_allocated_membership(::raftpb::Membership* membership);

  // .raftpb.SnapshotFile file_info = 17;
  bool has_file_info() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 17;
  const ::raftpb::SnapshotFile& file_info() const;
  ::raftpb::SnapshotFile* release_file_info();
  ::raftpb::SnapshotFile* mutable_file_info();
  void set_allocated_file_info(::raftpb::SnapshotFile* file_info);

  // uint64 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 chunk_id = 4;
  void clear_chunk_id();
  static const int kChunkIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_id() const;
  void set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 chunk_size = 5;
  void clear_chunk_size();
  static const int kChunkSizeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 chunk_count = 6;
  void clear_chunk_count();
  static const int kChunkCountFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_count() const;
  void set_chunk_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 index = 8;
  void clear_index();
  static const int kIndexFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 9;
  void clear_term();
  static const int kTermFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_size = 13;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 deployment_id = 14;
  void clear_deployment_id();
  static const int kDeploymentIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_chunk_id = 15;
  void clear_file_chunk_id();
  static const int kFileChunkIdFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_chunk_id() const;
  void set_file_chunk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_chunk_count = 16;
  void clear_file_chunk_count();
  static const int kFileChunkCountFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_chunk_count() const;
  void set_file_chunk_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 on_disk_index = 19;
  void clear_on_disk_index();
  static const int kOnDiskIndexFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::uint64 on_disk_index() const;
  void set_on_disk_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 bin_ver = 18;
  void clear_bin_ver();
  static const int kBinVerFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver() const;
  void set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool witness = 20;
  void clear_witness();
  static const int kWitnessFieldNumber = 20;
  bool witness() const;
  void set_witness(bool value);

  // @@protoc_insertion_point(class_scope:raftpb.SnapshotChunk)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::raftpb::Membership* membership_;
  ::raftpb::SnapshotFile* file_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 deployment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_chunk_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 on_disk_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bin_ver_;
  bool witness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Bootstrap

// map<uint64, string> addresses = 1;
inline int Bootstrap::addresses_size() const {
  return addresses_.size();
}
inline void Bootstrap::clear_addresses() {
  addresses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Bootstrap::addresses() const {
  // @@protoc_insertion_point(field_map:raftpb.Bootstrap.addresses)
  return addresses_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Bootstrap::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_map:raftpb.Bootstrap.addresses)
  return addresses_.MutableMap();
}

// bool join = 2;
inline void Bootstrap::clear_join() {
  join_ = false;
}
inline bool Bootstrap::join() const {
  // @@protoc_insertion_point(field_get:raftpb.Bootstrap.join)
  return join_;
}
inline void Bootstrap::set_join(bool value) {
  
  join_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Bootstrap.join)
}

// .raftpb.StateMachineType type = 3;
inline void Bootstrap::clear_type() {
  type_ = 0;
}
inline ::raftpb::StateMachineType Bootstrap::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Bootstrap.type)
  return static_cast< ::raftpb::StateMachineType >(type_);
}
inline void Bootstrap::set_type(::raftpb::StateMachineType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Bootstrap.type)
}

// -------------------------------------------------------------------

// RaftDataStatus

// string address = 1;
inline void RaftDataStatus::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RaftDataStatus::address() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.address)
  return address_.GetNoArena();
}
inline void RaftDataStatus::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.address)
}
inline void RaftDataStatus::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.RaftDataStatus.address)
}
inline void RaftDataStatus::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.RaftDataStatus.address)
}
inline void RaftDataStatus::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.RaftDataStatus.address)
}
inline std::string* RaftDataStatus::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.RaftDataStatus.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RaftDataStatus::release_address() {
  // @@protoc_insertion_point(field_release:raftpb.RaftDataStatus.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RaftDataStatus::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:raftpb.RaftDataStatus.address)
}

// uint32 bin_ver = 2;
inline void RaftDataStatus::clear_bin_ver() {
  bin_ver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RaftDataStatus::bin_ver() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.bin_ver)
  return bin_ver_;
}
inline void RaftDataStatus::set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bin_ver_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.bin_ver)
}

// uint64 hard_hash = 3;
inline void RaftDataStatus::clear_hard_hash() {
  hard_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::hard_hash() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.hard_hash)
  return hard_hash_;
}
inline void RaftDataStatus::set_hard_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hard_hash_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.hard_hash)
}

// string logdb_type = 4;
inline void RaftDataStatus::clear_logdb_type() {
  logdb_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RaftDataStatus::logdb_type() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.logdb_type)
  return logdb_type_.GetNoArena();
}
inline void RaftDataStatus::set_logdb_type(const std::string& value) {
  
  logdb_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.logdb_type)
}
inline void RaftDataStatus::set_logdb_type(std::string&& value) {
  
  logdb_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.RaftDataStatus.logdb_type)
}
inline void RaftDataStatus::set_logdb_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logdb_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.RaftDataStatus.logdb_type)
}
inline void RaftDataStatus::set_logdb_type(const char* value, size_t size) {
  
  logdb_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.RaftDataStatus.logdb_type)
}
inline std::string* RaftDataStatus::mutable_logdb_type() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.RaftDataStatus.logdb_type)
  return logdb_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RaftDataStatus::release_logdb_type() {
  // @@protoc_insertion_point(field_release:raftpb.RaftDataStatus.logdb_type)
  
  return logdb_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RaftDataStatus::set_allocated_logdb_type(std::string* logdb_type) {
  if (logdb_type != nullptr) {
    
  } else {
    
  }
  logdb_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdb_type);
  // @@protoc_insertion_point(field_set_allocated:raftpb.RaftDataStatus.logdb_type)
}

// string hostname = 5;
inline void RaftDataStatus::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RaftDataStatus::hostname() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.hostname)
  return hostname_.GetNoArena();
}
inline void RaftDataStatus::set_hostname(const std::string& value) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.hostname)
}
inline void RaftDataStatus::set_hostname(std::string&& value) {
  
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.RaftDataStatus.hostname)
}
inline void RaftDataStatus::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.RaftDataStatus.hostname)
}
inline void RaftDataStatus::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.RaftDataStatus.hostname)
}
inline std::string* RaftDataStatus::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.RaftDataStatus.hostname)
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RaftDataStatus::release_hostname() {
  // @@protoc_insertion_point(field_release:raftpb.RaftDataStatus.hostname)
  
  return hostname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RaftDataStatus::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:raftpb.RaftDataStatus.hostname)
}

// uint64 deployment_id = 6;
inline void RaftDataStatus::clear_deployment_id() {
  deployment_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::deployment_id() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.deployment_id)
  return deployment_id_;
}
inline void RaftDataStatus::set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  deployment_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.deployment_id)
}

// uint64 step_worker_count = 7;
inline void RaftDataStatus::clear_step_worker_count() {
  step_worker_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::step_worker_count() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.step_worker_count)
  return step_worker_count_;
}
inline void RaftDataStatus::set_step_worker_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  step_worker_count_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.step_worker_count)
}

// uint64 logdb_shard_count = 8;
inline void RaftDataStatus::clear_logdb_shard_count() {
  logdb_shard_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::logdb_shard_count() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.logdb_shard_count)
  return logdb_shard_count_;
}
inline void RaftDataStatus::set_logdb_shard_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  logdb_shard_count_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.logdb_shard_count)
}

// uint64 max_session_count = 9;
inline void RaftDataStatus::clear_max_session_count() {
  max_session_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::max_session_count() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.max_session_count)
  return max_session_count_;
}
inline void RaftDataStatus::set_max_session_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_session_count_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.max_session_count)
}

// uint64 entry_batch_size = 10;
inline void RaftDataStatus::clear_entry_batch_size() {
  entry_batch_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftDataStatus::entry_batch_size() const {
  // @@protoc_insertion_point(field_get:raftpb.RaftDataStatus.entry_batch_size)
  return entry_batch_size_;
}
inline void RaftDataStatus::set_entry_batch_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  entry_batch_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.RaftDataStatus.entry_batch_size)
}

// -------------------------------------------------------------------

// State

// uint64 term = 1;
inline void State::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::term() const {
  // @@protoc_insertion_point(field_get:raftpb.State.term)
  return term_;
}
inline void State::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.State.term)
}

// uint64 vote = 2;
inline void State::clear_vote() {
  vote_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::vote() const {
  // @@protoc_insertion_point(field_get:raftpb.State.vote)
  return vote_;
}
inline void State::set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:raftpb.State.vote)
}

// uint64 commit = 3;
inline void State::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 State::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.State.commit)
  return commit_;
}
inline void State::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raftpb.State.commit)
}

// -------------------------------------------------------------------

// Entry

// uint64 term = 1;
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.term)
  return term_;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.term)
}

// uint64 index = 2;
inline void Entry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.index)
  return index_;
}
inline void Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.index)
}

// .raftpb.EntryType type = 3;
inline void Entry::clear_type() {
  type_ = 0;
}
inline ::raftpb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.type)
  return static_cast< ::raftpb::EntryType >(type_);
}
inline void Entry::set_type(::raftpb::EntryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.type)
}

// uint64 key = 4;
inline void Entry::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::key() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.key)
  return key_;
}
inline void Entry::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.key)
}

// uint64 client_id = 5;
inline void Entry::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::client_id() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.client_id)
  return client_id_;
}
inline void Entry::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.client_id)
}

// uint64 series_id = 6;
inline void Entry::clear_series_id() {
  series_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::series_id() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.series_id)
  return series_id_;
}
inline void Entry::set_series_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  series_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.series_id)
}

// uint64 responded_to = 7;
inline void Entry::clear_responded_to() {
  responded_to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::responded_to() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.responded_to)
  return responded_to_;
}
inline void Entry::set_responded_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  responded_to_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Entry.responded_to)
}

// bytes cmd = 8;
inline void Entry::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::cmd() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.cmd)
  return cmd_.GetNoArena();
}
inline void Entry::set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.cmd)
}
inline void Entry::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Entry.cmd)
}
inline void Entry::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Entry.cmd)
}
inline void Entry::set_cmd(const void* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Entry.cmd)
}
inline std::string* Entry::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Entry.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_cmd() {
  // @@protoc_insertion_point(field_release:raftpb.Entry.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Entry.cmd)
}

// -------------------------------------------------------------------

// EntryBatch

// repeated .raftpb.Entry entries = 1;
inline int EntryBatch::entries_size() const {
  return entries_.size();
}
inline void EntryBatch::clear_entries() {
  entries_.Clear();
}
inline ::raftpb::Entry* EntryBatch::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.EntryBatch.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
EntryBatch::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.EntryBatch.entries)
  return &entries_;
}
inline const ::raftpb::Entry& EntryBatch::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.EntryBatch.entries)
  return entries_.Get(index);
}
inline ::raftpb::Entry* EntryBatch::add_entries() {
  // @@protoc_insertion_point(field_add:raftpb.EntryBatch.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
EntryBatch::entries() const {
  // @@protoc_insertion_point(field_list:raftpb.EntryBatch.entries)
  return entries_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Membership

// uint64 config_change_id = 1;
inline void Membership::clear_config_change_id() {
  config_change_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Membership::config_change_id() const {
  // @@protoc_insertion_point(field_get:raftpb.Membership.config_change_id)
  return config_change_id_;
}
inline void Membership::set_config_change_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  config_change_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Membership.config_change_id)
}

// map<uint64, string> addresses = 2;
inline int Membership::addresses_size() const {
  return addresses_.size();
}
inline void Membership::clear_addresses() {
  addresses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Membership::addresses() const {
  // @@protoc_insertion_point(field_map:raftpb.Membership.addresses)
  return addresses_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Membership::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_map:raftpb.Membership.addresses)
  return addresses_.MutableMap();
}

// map<uint64, bool> removed = 3;
inline int Membership::removed_size() const {
  return removed_.size();
}
inline void Membership::clear_removed() {
  removed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >&
Membership::removed() const {
  // @@protoc_insertion_point(field_map:raftpb.Membership.removed)
  return removed_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >*
Membership::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_map:raftpb.Membership.removed)
  return removed_.MutableMap();
}

// map<uint64, string> observers = 4;
inline int Membership::observers_size() const {
  return observers_.size();
}
inline void Membership::clear_observers() {
  observers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Membership::observers() const {
  // @@protoc_insertion_point(field_map:raftpb.Membership.observers)
  return observers_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Membership::mutable_observers() {
  // @@protoc_insertion_point(field_mutable_map:raftpb.Membership.observers)
  return observers_.MutableMap();
}

// map<uint64, string> witnesses = 5;
inline int Membership::witnesses_size() const {
  return witnesses_.size();
}
inline void Membership::clear_witnesses() {
  witnesses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Membership::witnesses() const {
  // @@protoc_insertion_point(field_map:raftpb.Membership.witnesses)
  return witnesses_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Membership::mutable_witnesses() {
  // @@protoc_insertion_point(field_mutable_map:raftpb.Membership.witnesses)
  return witnesses_.MutableMap();
}

// -------------------------------------------------------------------

// SnapshotFile

// string file_path = 2;
inline void SnapshotFile::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotFile::file_path() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotFile.file_path)
  return file_path_.GetNoArena();
}
inline void SnapshotFile::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotFile.file_path)
}
inline void SnapshotFile::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotFile.file_path)
}
inline void SnapshotFile::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotFile.file_path)
}
inline void SnapshotFile::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotFile.file_path)
}
inline std::string* SnapshotFile::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotFile.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotFile::release_file_path() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotFile.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotFile::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotFile.file_path)
}

// uint64 file_size = 3;
inline void SnapshotFile::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotFile::file_size() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotFile.file_size)
  return file_size_;
}
inline void SnapshotFile::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotFile.file_size)
}

// uint64 file_id = 4;
inline void SnapshotFile::clear_file_id() {
  file_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotFile::file_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotFile.file_id)
  return file_id_;
}
inline void SnapshotFile::set_file_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotFile.file_id)
}

// bytes metadata = 5;
inline void SnapshotFile::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotFile::metadata() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotFile.metadata)
  return metadata_.GetNoArena();
}
inline void SnapshotFile::set_metadata(const std::string& value) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotFile.metadata)
}
inline void SnapshotFile::set_metadata(std::string&& value) {
  
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotFile.metadata)
}
inline void SnapshotFile::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotFile.metadata)
}
inline void SnapshotFile::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotFile.metadata)
}
inline std::string* SnapshotFile::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotFile.metadata)
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotFile::release_metadata() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotFile.metadata)
  
  return metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotFile::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotFile.metadata)
}

// -------------------------------------------------------------------

// Snapshot

// string filepath = 2;
inline void Snapshot::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Snapshot::filepath() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.filepath)
  return filepath_.GetNoArena();
}
inline void Snapshot::set_filepath(const std::string& value) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.filepath)
}
inline void Snapshot::set_filepath(std::string&& value) {
  
  filepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Snapshot.filepath)
}
inline void Snapshot::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Snapshot.filepath)
}
inline void Snapshot::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Snapshot.filepath)
}
inline std::string* Snapshot::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.filepath)
  return filepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Snapshot::release_filepath() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.filepath)
  
  return filepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Snapshot::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.filepath)
}

// uint64 file_size = 3;
inline void Snapshot::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Snapshot::file_size() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.file_size)
  return file_size_;
}
inline void Snapshot::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.file_size)
}

// uint64 index = 4;
inline void Snapshot::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Snapshot::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.index)
  return index_;
}
inline void Snapshot::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.index)
}

// uint64 term = 5;
inline void Snapshot::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Snapshot::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.term)
  return term_;
}
inline void Snapshot::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.term)
}

// .raftpb.Membership membership = 6;
inline bool Snapshot::has_membership() const {
  return this != internal_default_instance() && membership_ != nullptr;
}
inline void Snapshot::clear_membership() {
  if (GetArenaNoVirtual() == nullptr && membership_ != nullptr) {
    delete membership_;
  }
  membership_ = nullptr;
}
inline const ::raftpb::Membership& Snapshot::membership() const {
  const ::raftpb::Membership* p = membership_;
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.membership)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftpb::Membership*>(
      &::raftpb::_Membership_default_instance_);
}
inline ::raftpb::Membership* Snapshot::release_membership() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.membership)
  
  ::raftpb::Membership* temp = membership_;
  membership_ = nullptr;
  return temp;
}
inline ::raftpb::Membership* Snapshot::mutable_membership() {
  
  if (membership_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::Membership>(GetArenaNoVirtual());
    membership_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.membership)
  return membership_;
}
inline void Snapshot::set_allocated_membership(::raftpb::Membership* membership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete membership_;
  }
  if (membership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      membership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membership, submessage_arena);
    }
    
  } else {
    
  }
  membership_ = membership;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.membership)
}

// repeated .raftpb.SnapshotFile files = 7;
inline int Snapshot::files_size() const {
  return files_.size();
}
inline void Snapshot::clear_files() {
  files_.Clear();
}
inline ::raftpb::SnapshotFile* Snapshot::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::SnapshotFile >*
Snapshot::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.Snapshot.files)
  return &files_;
}
inline const ::raftpb::SnapshotFile& Snapshot::files(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.files)
  return files_.Get(index);
}
inline ::raftpb::SnapshotFile* Snapshot::add_files() {
  // @@protoc_insertion_point(field_add:raftpb.Snapshot.files)
  return files_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::SnapshotFile >&
Snapshot::files() const {
  // @@protoc_insertion_point(field_list:raftpb.Snapshot.files)
  return files_;
}

// bytes checksum = 8;
inline void Snapshot::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Snapshot::checksum() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.checksum)
  return checksum_.GetNoArena();
}
inline void Snapshot::set_checksum(const std::string& value) {
  
  checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.checksum)
}
inline void Snapshot::set_checksum(std::string&& value) {
  
  checksum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Snapshot.checksum)
}
inline void Snapshot::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Snapshot.checksum)
}
inline void Snapshot::set_checksum(const void* value, size_t size) {
  
  checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Snapshot.checksum)
}
inline std::string* Snapshot::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.checksum)
  return checksum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Snapshot::release_checksum() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.checksum)
  
  return checksum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Snapshot::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.checksum)
}

// bool dummy = 9;
inline void Snapshot::clear_dummy() {
  dummy_ = false;
}
inline bool Snapshot::dummy() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.dummy)
  return dummy_;
}
inline void Snapshot::set_dummy(bool value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.dummy)
}

// uint64 cluster_id = 10;
inline void Snapshot::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Snapshot::cluster_id() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.cluster_id)
  return cluster_id_;
}
inline void Snapshot::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.cluster_id)
}

// .raftpb.StateMachineType type = 11;
inline void Snapshot::clear_type() {
  type_ = 0;
}
inline ::raftpb::StateMachineType Snapshot::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.type)
  return static_cast< ::raftpb::StateMachineType >(type_);
}
inline void Snapshot::set_type(::raftpb::StateMachineType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.type)
}

// bool imported = 12;
inline void Snapshot::clear_imported() {
  imported_ = false;
}
inline bool Snapshot::imported() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.imported)
  return imported_;
}
inline void Snapshot::set_imported(bool value) {
  
  imported_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.imported)
}

// uint64 on_disk_index = 13;
inline void Snapshot::clear_on_disk_index() {
  on_disk_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Snapshot::on_disk_index() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.on_disk_index)
  return on_disk_index_;
}
inline void Snapshot::set_on_disk_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  on_disk_index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.on_disk_index)
}

// bool witness = 14;
inline void Snapshot::clear_witness() {
  witness_ = false;
}
inline bool Snapshot::witness() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.witness)
  return witness_;
}
inline void Snapshot::set_witness(bool value) {
  
  witness_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.witness)
}

// -------------------------------------------------------------------

// Message

// .raftpb.MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::raftpb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.type)
  return static_cast< ::raftpb::MessageType >(type_);
}
inline void Message::set_type(::raftpb::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.type)
}

// uint64 to = 2;
inline void Message::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.to)
  return to_;
}
inline void Message::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.to)
}

// uint64 from = 3;
inline void Message::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.from)
  return from_;
}
inline void Message::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.from)
}

// uint64 cluster_id = 4;
inline void Message::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::cluster_id() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.cluster_id)
  return cluster_id_;
}
inline void Message::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.cluster_id)
}

// uint64 term = 5;
inline void Message::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.term)
  return term_;
}
inline void Message::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.term)
}

// uint64 log_term = 6;
inline void Message::clear_log_term() {
  log_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::log_term() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.log_term)
  return log_term_;
}
inline void Message::set_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.log_term)
}

// uint64 log_index = 7;
inline void Message::clear_log_index() {
  log_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::log_index() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.log_index)
  return log_index_;
}
inline void Message::set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.log_index)
}

// uint64 commit = 8;
inline void Message::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.commit)
  return commit_;
}
inline void Message::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.commit)
}

// bool reject = 9;
inline void Message::clear_reject() {
  reject_ = false;
}
inline bool Message::reject() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.reject)
  return reject_;
}
inline void Message::set_reject(bool value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.reject)
}

// uint64 hint = 10;
inline void Message::clear_hint() {
  hint_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::hint() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.hint)
  return hint_;
}
inline void Message::set_hint(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hint_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.hint)
}

// repeated .raftpb.Entry entries = 11;
inline int Message::entries_size() const {
  return entries_.size();
}
inline void Message::clear_entries() {
  entries_.Clear();
}
inline ::raftpb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.Message.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.Message.entries)
  return &entries_;
}
inline const ::raftpb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.Message.entries)
  return entries_.Get(index);
}
inline ::raftpb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:raftpb.Message.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:raftpb.Message.entries)
  return entries_;
}

// .raftpb.Snapshot snapshot = 12;
inline bool Message::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline void Message::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::raftpb::Snapshot& Message::snapshot() const {
  const ::raftpb::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:raftpb.Message.snapshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftpb::Snapshot*>(
      &::raftpb::_Snapshot_default_instance_);
}
inline ::raftpb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:raftpb.Message.snapshot)
  
  ::raftpb::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::raftpb::Snapshot* Message::mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::Snapshot>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.Message.snapshot)
  return snapshot_;
}
inline void Message::set_allocated_snapshot(::raftpb::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Message.snapshot)
}

// uint64 hint_high = 13;
inline void Message::clear_hint_high() {
  hint_high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::hint_high() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.hint_high)
  return hint_high_;
}
inline void Message::set_hint_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hint_high_ = value;
  // @@protoc_insertion_point(field_set:raftpb.Message.hint_high)
}

// -------------------------------------------------------------------

// ConfigChange

// uint64 config_change_id = 1;
inline void ConfigChange::clear_config_change_id() {
  config_change_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigChange::config_change_id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfigChange.config_change_id)
  return config_change_id_;
}
inline void ConfigChange::set_config_change_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  config_change_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfigChange.config_change_id)
}

// .raftpb.ConfigChangeType type = 2;
inline void ConfigChange::clear_type() {
  type_ = 0;
}
inline ::raftpb::ConfigChangeType ConfigChange::type() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfigChange.type)
  return static_cast< ::raftpb::ConfigChangeType >(type_);
}
inline void ConfigChange::set_type(::raftpb::ConfigChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfigChange.type)
}

// uint64 node_id = 3;
inline void ConfigChange::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigChange::node_id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfigChange.node_id)
  return node_id_;
}
inline void ConfigChange::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfigChange.node_id)
}

// string address = 4;
inline void ConfigChange::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigChange::address() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfigChange.address)
  return address_.GetNoArena();
}
inline void ConfigChange::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.ConfigChange.address)
}
inline void ConfigChange::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.ConfigChange.address)
}
inline void ConfigChange::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.ConfigChange.address)
}
inline void ConfigChange::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.ConfigChange.address)
}
inline std::string* ConfigChange::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.ConfigChange.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigChange::release_address() {
  // @@protoc_insertion_point(field_release:raftpb.ConfigChange.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChange::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:raftpb.ConfigChange.address)
}

// bool initialize = 5;
inline void ConfigChange::clear_initialize() {
  initialize_ = false;
}
inline bool ConfigChange::initialize() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfigChange.initialize)
  return initialize_;
}
inline void ConfigChange::set_initialize(bool value) {
  
  initialize_ = value;
  // @@protoc_insertion_point(field_set:raftpb.ConfigChange.initialize)
}

// -------------------------------------------------------------------

// SnapshotHeader

// uint64 session_size = 1;
inline void SnapshotHeader::clear_session_size() {
  session_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotHeader::session_size() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.session_size)
  return session_size_;
}
inline void SnapshotHeader::set_session_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.session_size)
}

// uint64 data_store_size = 2;
inline void SnapshotHeader::clear_data_store_size() {
  data_store_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotHeader::data_store_size() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.data_store_size)
  return data_store_size_;
}
inline void SnapshotHeader::set_data_store_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_store_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.data_store_size)
}

// uint64 unreliable_time = 3;
inline void SnapshotHeader::clear_unreliable_time() {
  unreliable_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotHeader::unreliable_time() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.unreliable_time)
  return unreliable_time_;
}
inline void SnapshotHeader::set_unreliable_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unreliable_time_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.unreliable_time)
}

// string git_version = 4;
inline void SnapshotHeader::clear_git_version() {
  git_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotHeader::git_version() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.git_version)
  return git_version_.GetNoArena();
}
inline void SnapshotHeader::set_git_version(const std::string& value) {
  
  git_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.git_version)
}
inline void SnapshotHeader::set_git_version(std::string&& value) {
  
  git_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotHeader.git_version)
}
inline void SnapshotHeader::set_git_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotHeader.git_version)
}
inline void SnapshotHeader::set_git_version(const char* value, size_t size) {
  
  git_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotHeader.git_version)
}
inline std::string* SnapshotHeader::mutable_git_version() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotHeader.git_version)
  return git_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotHeader::release_git_version() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotHeader.git_version)
  
  return git_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotHeader::set_allocated_git_version(std::string* git_version) {
  if (git_version != nullptr) {
    
  } else {
    
  }
  git_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_version);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotHeader.git_version)
}

// bytes header_checksum = 5;
inline void SnapshotHeader::clear_header_checksum() {
  header_checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotHeader::header_checksum() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.header_checksum)
  return header_checksum_.GetNoArena();
}
inline void SnapshotHeader::set_header_checksum(const std::string& value) {
  
  header_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.header_checksum)
}
inline void SnapshotHeader::set_header_checksum(std::string&& value) {
  
  header_checksum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotHeader.header_checksum)
}
inline void SnapshotHeader::set_header_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotHeader.header_checksum)
}
inline void SnapshotHeader::set_header_checksum(const void* value, size_t size) {
  
  header_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotHeader.header_checksum)
}
inline std::string* SnapshotHeader::mutable_header_checksum() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotHeader.header_checksum)
  return header_checksum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotHeader::release_header_checksum() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotHeader.header_checksum)
  
  return header_checksum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotHeader::set_allocated_header_checksum(std::string* header_checksum) {
  if (header_checksum != nullptr) {
    
  } else {
    
  }
  header_checksum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_checksum);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotHeader.header_checksum)
}

// bytes payload_checksum = 6;
inline void SnapshotHeader::clear_payload_checksum() {
  payload_checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotHeader::payload_checksum() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.payload_checksum)
  return payload_checksum_.GetNoArena();
}
inline void SnapshotHeader::set_payload_checksum(const std::string& value) {
  
  payload_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.payload_checksum)
}
inline void SnapshotHeader::set_payload_checksum(std::string&& value) {
  
  payload_checksum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotHeader.payload_checksum)
}
inline void SnapshotHeader::set_payload_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotHeader.payload_checksum)
}
inline void SnapshotHeader::set_payload_checksum(const void* value, size_t size) {
  
  payload_checksum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotHeader.payload_checksum)
}
inline std::string* SnapshotHeader::mutable_payload_checksum() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotHeader.payload_checksum)
  return payload_checksum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotHeader::release_payload_checksum() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotHeader.payload_checksum)
  
  return payload_checksum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotHeader::set_allocated_payload_checksum(std::string* payload_checksum) {
  if (payload_checksum != nullptr) {
    
  } else {
    
  }
  payload_checksum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_checksum);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotHeader.payload_checksum)
}

// .raftpb.ChecksumType checksum_type = 7;
inline void SnapshotHeader::clear_checksum_type() {
  checksum_type_ = 0;
}
inline ::raftpb::ChecksumType SnapshotHeader::checksum_type() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.checksum_type)
  return static_cast< ::raftpb::ChecksumType >(checksum_type_);
}
inline void SnapshotHeader::set_checksum_type(::raftpb::ChecksumType value) {
  
  checksum_type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.checksum_type)
}

// uint64 version = 8;
inline void SnapshotHeader::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotHeader::version() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.version)
  return version_;
}
inline void SnapshotHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.version)
}

// .raftpb.CompressionType compression_type = 9;
inline void SnapshotHeader::clear_compression_type() {
  compression_type_ = 0;
}
inline ::raftpb::CompressionType SnapshotHeader::compression_type() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotHeader.compression_type)
  return static_cast< ::raftpb::CompressionType >(compression_type_);
}
inline void SnapshotHeader::set_compression_type(::raftpb::CompressionType value) {
  
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotHeader.compression_type)
}

// -------------------------------------------------------------------

// MessageBatch

// repeated .raftpb.Message requests = 1;
inline int MessageBatch::requests_size() const {
  return requests_.size();
}
inline void MessageBatch::clear_requests() {
  requests_.Clear();
}
inline ::raftpb::Message* MessageBatch::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.MessageBatch.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Message >*
MessageBatch::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.MessageBatch.requests)
  return &requests_;
}
inline const ::raftpb::Message& MessageBatch::requests(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.MessageBatch.requests)
  return requests_.Get(index);
}
inline ::raftpb::Message* MessageBatch::add_requests() {
  // @@protoc_insertion_point(field_add:raftpb.MessageBatch.requests)
  return requests_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Message >&
MessageBatch::requests() const {
  // @@protoc_insertion_point(field_list:raftpb.MessageBatch.requests)
  return requests_;
}

// uint64 deployment_id = 2;
inline void MessageBatch::clear_deployment_id() {
  deployment_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MessageBatch::deployment_id() const {
  // @@protoc_insertion_point(field_get:raftpb.MessageBatch.deployment_id)
  return deployment_id_;
}
inline void MessageBatch::set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  deployment_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.MessageBatch.deployment_id)
}

// string source_address = 3;
inline void MessageBatch::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageBatch::source_address() const {
  // @@protoc_insertion_point(field_get:raftpb.MessageBatch.source_address)
  return source_address_.GetNoArena();
}
inline void MessageBatch::set_source_address(const std::string& value) {
  
  source_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.MessageBatch.source_address)
}
inline void MessageBatch::set_source_address(std::string&& value) {
  
  source_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.MessageBatch.source_address)
}
inline void MessageBatch::set_source_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.MessageBatch.source_address)
}
inline void MessageBatch::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.MessageBatch.source_address)
}
inline std::string* MessageBatch::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.MessageBatch.source_address)
  return source_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageBatch::release_source_address() {
  // @@protoc_insertion_point(field_release:raftpb.MessageBatch.source_address)
  
  return source_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBatch::set_allocated_source_address(std::string* source_address) {
  if (source_address != nullptr) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:raftpb.MessageBatch.source_address)
}

// uint32 bin_ver = 4;
inline void MessageBatch::clear_bin_ver() {
  bin_ver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageBatch::bin_ver() const {
  // @@protoc_insertion_point(field_get:raftpb.MessageBatch.bin_ver)
  return bin_ver_;
}
inline void MessageBatch::set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bin_ver_ = value;
  // @@protoc_insertion_point(field_set:raftpb.MessageBatch.bin_ver)
}

// -------------------------------------------------------------------

// SnapshotChunk

// uint64 cluster_id = 1;
inline void SnapshotChunk::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::cluster_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.cluster_id)
  return cluster_id_;
}
inline void SnapshotChunk::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.cluster_id)
}

// uint64 node_id = 2;
inline void SnapshotChunk::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::node_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.node_id)
  return node_id_;
}
inline void SnapshotChunk::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.node_id)
}

// uint64 from = 3;
inline void SnapshotChunk::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::from() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.from)
  return from_;
}
inline void SnapshotChunk::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.from)
}

// uint64 chunk_id = 4;
inline void SnapshotChunk::clear_chunk_id() {
  chunk_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::chunk_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.chunk_id)
  return chunk_id_;
}
inline void SnapshotChunk::set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.chunk_id)
}

// uint64 chunk_size = 5;
inline void SnapshotChunk::clear_chunk_size() {
  chunk_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::chunk_size() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.chunk_size)
  return chunk_size_;
}
inline void SnapshotChunk::set_chunk_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunk_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.chunk_size)
}

// uint64 chunk_count = 6;
inline void SnapshotChunk::clear_chunk_count() {
  chunk_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::chunk_count() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.chunk_count)
  return chunk_count_;
}
inline void SnapshotChunk::set_chunk_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunk_count_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.chunk_count)
}

// bytes data = 7;
inline void SnapshotChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotChunk::data() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.data)
  return data_.GetNoArena();
}
inline void SnapshotChunk::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotChunk.data)
}
inline std::string* SnapshotChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotChunk.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotChunk::release_data() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotChunk.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotChunk.data)
}

// uint64 index = 8;
inline void SnapshotChunk::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::index() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.index)
  return index_;
}
inline void SnapshotChunk::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.index)
}

// uint64 term = 9;
inline void SnapshotChunk::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::term() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.term)
  return term_;
}
inline void SnapshotChunk::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.term)
}

// .raftpb.Membership membership = 10;
inline bool SnapshotChunk::has_membership() const {
  return this != internal_default_instance() && membership_ != nullptr;
}
inline void SnapshotChunk::clear_membership() {
  if (GetArenaNoVirtual() == nullptr && membership_ != nullptr) {
    delete membership_;
  }
  membership_ = nullptr;
}
inline const ::raftpb::Membership& SnapshotChunk::membership() const {
  const ::raftpb::Membership* p = membership_;
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.membership)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftpb::Membership*>(
      &::raftpb::_Membership_default_instance_);
}
inline ::raftpb::Membership* SnapshotChunk::release_membership() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotChunk.membership)
  
  ::raftpb::Membership* temp = membership_;
  membership_ = nullptr;
  return temp;
}
inline ::raftpb::Membership* SnapshotChunk::mutable_membership() {
  
  if (membership_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::Membership>(GetArenaNoVirtual());
    membership_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotChunk.membership)
  return membership_;
}
inline void SnapshotChunk::set_allocated_membership(::raftpb::Membership* membership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete membership_;
  }
  if (membership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      membership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membership, submessage_arena);
    }
    
  } else {
    
  }
  membership_ = membership;
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotChunk.membership)
}

// string filepath = 12;
inline void SnapshotChunk::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotChunk::filepath() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.filepath)
  return filepath_.GetNoArena();
}
inline void SnapshotChunk::set_filepath(const std::string& value) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.filepath)
}
inline void SnapshotChunk::set_filepath(std::string&& value) {
  
  filepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.SnapshotChunk.filepath)
}
inline void SnapshotChunk::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.SnapshotChunk.filepath)
}
inline void SnapshotChunk::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.SnapshotChunk.filepath)
}
inline std::string* SnapshotChunk::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotChunk.filepath)
  return filepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotChunk::release_filepath() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotChunk.filepath)
  
  return filepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotChunk::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotChunk.filepath)
}

// uint64 file_size = 13;
inline void SnapshotChunk::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::file_size() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.file_size)
  return file_size_;
}
inline void SnapshotChunk::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.file_size)
}

// uint64 deployment_id = 14;
inline void SnapshotChunk::clear_deployment_id() {
  deployment_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::deployment_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.deployment_id)
  return deployment_id_;
}
inline void SnapshotChunk::set_deployment_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  deployment_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.deployment_id)
}

// uint64 file_chunk_id = 15;
inline void SnapshotChunk::clear_file_chunk_id() {
  file_chunk_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::file_chunk_id() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.file_chunk_id)
  return file_chunk_id_;
}
inline void SnapshotChunk::set_file_chunk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_chunk_id_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.file_chunk_id)
}

// uint64 file_chunk_count = 16;
inline void SnapshotChunk::clear_file_chunk_count() {
  file_chunk_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::file_chunk_count() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.file_chunk_count)
  return file_chunk_count_;
}
inline void SnapshotChunk::set_file_chunk_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_chunk_count_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.file_chunk_count)
}

// .raftpb.SnapshotFile file_info = 17;
inline bool SnapshotChunk::has_file_info() const {
  return this != internal_default_instance() && file_info_ != nullptr;
}
inline void SnapshotChunk::clear_file_info() {
  if (GetArenaNoVirtual() == nullptr && file_info_ != nullptr) {
    delete file_info_;
  }
  file_info_ = nullptr;
}
inline const ::raftpb::SnapshotFile& SnapshotChunk::file_info() const {
  const ::raftpb::SnapshotFile* p = file_info_;
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.file_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::raftpb::SnapshotFile*>(
      &::raftpb::_SnapshotFile_default_instance_);
}
inline ::raftpb::SnapshotFile* SnapshotChunk::release_file_info() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotChunk.file_info)
  
  ::raftpb::SnapshotFile* temp = file_info_;
  file_info_ = nullptr;
  return temp;
}
inline ::raftpb::SnapshotFile* SnapshotChunk::mutable_file_info() {
  
  if (file_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::SnapshotFile>(GetArenaNoVirtual());
    file_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotChunk.file_info)
  return file_info_;
}
inline void SnapshotChunk::set_allocated_file_info(::raftpb::SnapshotFile* file_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_info_;
  }
  if (file_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    
  } else {
    
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotChunk.file_info)
}

// uint32 bin_ver = 18;
inline void SnapshotChunk::clear_bin_ver() {
  bin_ver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnapshotChunk::bin_ver() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.bin_ver)
  return bin_ver_;
}
inline void SnapshotChunk::set_bin_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bin_ver_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.bin_ver)
}

// uint64 on_disk_index = 19;
inline void SnapshotChunk::clear_on_disk_index() {
  on_disk_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotChunk::on_disk_index() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.on_disk_index)
  return on_disk_index_;
}
inline void SnapshotChunk::set_on_disk_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  on_disk_index_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.on_disk_index)
}

// bool witness = 20;
inline void SnapshotChunk::clear_witness() {
  witness_ = false;
}
inline bool SnapshotChunk::witness() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotChunk.witness)
  return witness_;
}
inline void SnapshotChunk::set_witness(bool value) {
  
  witness_ = value;
  // @@protoc_insertion_point(field_set:raftpb.SnapshotChunk.witness)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raftpb::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::MessageType>() {
  return ::raftpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::EntryType>() {
  return ::raftpb::EntryType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::ConfigChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::ConfigChangeType>() {
  return ::raftpb::ConfigChangeType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::StateMachineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::StateMachineType>() {
  return ::raftpb::StateMachineType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::CompressionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::CompressionType>() {
  return ::raftpb::CompressionType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::ChecksumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::ChecksumType>() {
  return ::raftpb::ChecksumType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
