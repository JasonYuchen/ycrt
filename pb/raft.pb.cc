// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Membership_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Message_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Snapshot_raft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotFile_raft_2eproto;
namespace raftpb {
class Bootstrap_AddressesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bootstrap_AddressesEntry_DoNotUse> _instance;
} _Bootstrap_AddressesEntry_DoNotUse_default_instance_;
class BootstrapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bootstrap> _instance;
} _Bootstrap_default_instance_;
class RaftDataStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftDataStatus> _instance;
} _RaftDataStatus_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class EntryBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntryBatch> _instance;
} _EntryBatch_default_instance_;
class Membership_AddressesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Membership_AddressesEntry_DoNotUse> _instance;
} _Membership_AddressesEntry_DoNotUse_default_instance_;
class Membership_RemovedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Membership_RemovedEntry_DoNotUse> _instance;
} _Membership_RemovedEntry_DoNotUse_default_instance_;
class Membership_ObserversEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Membership_ObserversEntry_DoNotUse> _instance;
} _Membership_ObserversEntry_DoNotUse_default_instance_;
class Membership_WitnessesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Membership_WitnessesEntry_DoNotUse> _instance;
} _Membership_WitnessesEntry_DoNotUse_default_instance_;
class MembershipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Membership> _instance;
} _Membership_default_instance_;
class SnapshotFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotFile> _instance;
} _SnapshotFile_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Snapshot> _instance;
} _Snapshot_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class ConfigChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigChange> _instance;
} _ConfigChange_default_instance_;
class SnapshotHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotHeader> _instance;
} _SnapshotHeader_default_instance_;
class MessageBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBatch> _instance;
} _MessageBatch_default_instance_;
class SnapshotChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotChunk> _instance;
} _SnapshotChunk_default_instance_;
}  // namespace raftpb
static void InitDefaultsscc_info_Bootstrap_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Bootstrap_default_instance_;
    new (ptr) ::raftpb::Bootstrap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::Bootstrap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bootstrap_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Bootstrap_raft_2eproto}, {
      &scc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto.base,}};

static void InitDefaultsscc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Bootstrap_AddressesEntry_DoNotUse_default_instance_;
    new (ptr) ::raftpb::Bootstrap_AddressesEntry_DoNotUse();
  }
  ::raftpb::Bootstrap_AddressesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_ConfigChange_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_ConfigChange_default_instance_;
    new (ptr) ::raftpb::ConfigChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::ConfigChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigChange_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConfigChange_raft_2eproto}, {}};

static void InitDefaultsscc_info_Entry_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Entry_default_instance_;
    new (ptr) ::raftpb::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Entry_raft_2eproto}, {}};

static void InitDefaultsscc_info_EntryBatch_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_EntryBatch_default_instance_;
    new (ptr) ::raftpb::EntryBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::EntryBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntryBatch_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EntryBatch_raft_2eproto}, {
      &scc_info_Entry_raft_2eproto.base,}};

static void InitDefaultsscc_info_Membership_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Membership_default_instance_;
    new (ptr) ::raftpb::Membership();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::Membership::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Membership_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Membership_raft_2eproto}, {
      &scc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto.base,
      &scc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto.base,
      &scc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto.base,
      &scc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto.base,}};

static void InitDefaultsscc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Membership_AddressesEntry_DoNotUse_default_instance_;
    new (ptr) ::raftpb::Membership_AddressesEntry_DoNotUse();
  }
  ::raftpb::Membership_AddressesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Membership_ObserversEntry_DoNotUse_default_instance_;
    new (ptr) ::raftpb::Membership_ObserversEntry_DoNotUse();
  }
  ::raftpb::Membership_ObserversEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Membership_RemovedEntry_DoNotUse_default_instance_;
    new (ptr) ::raftpb::Membership_RemovedEntry_DoNotUse();
  }
  ::raftpb::Membership_RemovedEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Membership_WitnessesEntry_DoNotUse_default_instance_;
    new (ptr) ::raftpb::Membership_WitnessesEntry_DoNotUse();
  }
  ::raftpb::Membership_WitnessesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto}, {}};

static void InitDefaultsscc_info_Message_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Message_default_instance_;
    new (ptr) ::raftpb::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Message_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Message_raft_2eproto}, {
      &scc_info_Entry_raft_2eproto.base,
      &scc_info_Snapshot_raft_2eproto.base,}};

static void InitDefaultsscc_info_MessageBatch_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_MessageBatch_default_instance_;
    new (ptr) ::raftpb::MessageBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::MessageBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageBatch_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MessageBatch_raft_2eproto}, {
      &scc_info_Message_raft_2eproto.base,}};

static void InitDefaultsscc_info_RaftDataStatus_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_RaftDataStatus_default_instance_;
    new (ptr) ::raftpb::RaftDataStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::RaftDataStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftDataStatus_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RaftDataStatus_raft_2eproto}, {}};

static void InitDefaultsscc_info_Snapshot_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_Snapshot_default_instance_;
    new (ptr) ::raftpb::Snapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::Snapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Snapshot_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Snapshot_raft_2eproto}, {
      &scc_info_Membership_raft_2eproto.base,
      &scc_info_SnapshotFile_raft_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotChunk_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_SnapshotChunk_default_instance_;
    new (ptr) ::raftpb::SnapshotChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::SnapshotChunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnapshotChunk_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SnapshotChunk_raft_2eproto}, {
      &scc_info_Membership_raft_2eproto.base,
      &scc_info_SnapshotFile_raft_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotFile_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_SnapshotFile_default_instance_;
    new (ptr) ::raftpb::SnapshotFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::SnapshotFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotFile_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotFile_raft_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotHeader_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_SnapshotHeader_default_instance_;
    new (ptr) ::raftpb::SnapshotHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::SnapshotHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotHeader_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotHeader_raft_2eproto}, {}};

static void InitDefaultsscc_info_State_raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raftpb::_State_default_instance_;
    new (ptr) ::raftpb::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raftpb::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_raft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_State_raft_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_raft_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_raft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap_AddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap_AddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap_AddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap_AddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap, addresses_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap, join_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Bootstrap, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, address_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, bin_ver_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, hard_hash_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, logdb_type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, hostname_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, deployment_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, step_worker_count_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, logdb_shard_count_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, max_session_count_),
  PROTOBUF_FIELD_OFFSET(::raftpb::RaftDataStatus, entry_batch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::State, term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::State, vote_),
  PROTOBUF_FIELD_OFFSET(::raftpb::State, commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, client_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, series_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, responded_to_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Entry, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::EntryBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::EntryBatch, entries_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_AddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_AddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_AddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_AddressesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_RemovedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_RemovedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_RemovedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_RemovedEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_ObserversEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_ObserversEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_ObserversEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_ObserversEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_WitnessesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_WitnessesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_WitnessesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership_WitnessesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, config_change_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, addresses_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, removed_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, observers_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Membership, witnesses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotFile, file_path_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotFile, file_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotFile, file_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotFile, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, filepath_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, file_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, membership_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, files_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, checksum_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, dummy_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, imported_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, on_disk_index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Snapshot, witness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, to_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, from_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, log_term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, log_index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, commit_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, reject_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, hint_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, entries_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, snapshot_),
  PROTOBUF_FIELD_OFFSET(::raftpb::Message, hint_high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, config_change_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, node_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, address_),
  PROTOBUF_FIELD_OFFSET(::raftpb::ConfigChange, initialize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, session_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, data_store_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, unreliable_time_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, git_version_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, header_checksum_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, payload_checksum_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, checksum_type_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, version_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotHeader, compression_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::MessageBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::MessageBatch, requests_),
  PROTOBUF_FIELD_OFFSET(::raftpb::MessageBatch, deployment_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::MessageBatch, source_address_),
  PROTOBUF_FIELD_OFFSET(::raftpb::MessageBatch, bin_ver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, node_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, from_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, chunk_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, chunk_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, chunk_count_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, data_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, term_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, membership_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, filepath_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, file_size_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, deployment_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, file_chunk_id_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, file_chunk_count_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, file_info_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, bin_ver_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, on_disk_index_),
  PROTOBUF_FIELD_OFFSET(::raftpb::SnapshotChunk, witness_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::raftpb::Bootstrap_AddressesEntry_DoNotUse)},
  { 9, -1, sizeof(::raftpb::Bootstrap)},
  { 17, -1, sizeof(::raftpb::RaftDataStatus)},
  { 32, -1, sizeof(::raftpb::State)},
  { 40, -1, sizeof(::raftpb::Entry)},
  { 53, -1, sizeof(::raftpb::EntryBatch)},
  { 59, 66, sizeof(::raftpb::Membership_AddressesEntry_DoNotUse)},
  { 68, 75, sizeof(::raftpb::Membership_RemovedEntry_DoNotUse)},
  { 77, 84, sizeof(::raftpb::Membership_ObserversEntry_DoNotUse)},
  { 86, 93, sizeof(::raftpb::Membership_WitnessesEntry_DoNotUse)},
  { 95, -1, sizeof(::raftpb::Membership)},
  { 105, -1, sizeof(::raftpb::SnapshotFile)},
  { 114, -1, sizeof(::raftpb::Snapshot)},
  { 132, -1, sizeof(::raftpb::Message)},
  { 150, -1, sizeof(::raftpb::ConfigChange)},
  { 160, -1, sizeof(::raftpb::SnapshotHeader)},
  { 174, -1, sizeof(::raftpb::MessageBatch)},
  { 183, -1, sizeof(::raftpb::SnapshotChunk)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Bootstrap_AddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Bootstrap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_RaftDataStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_EntryBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Membership_AddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Membership_RemovedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Membership_ObserversEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Membership_WitnessesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Membership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_SnapshotFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Snapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_ConfigChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_SnapshotHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_MessageBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raftpb::_SnapshotChunk_default_instance_),
};

const char descriptor_table_protodef_raft_2eproto[] =
  "\n\nraft.proto\022\006raftpb\"\250\001\n\tBootstrap\0223\n\tad"
  "dresses\030\001 \003(\0132 .raftpb.Bootstrap.Address"
  "esEntry\022\014\n\004join\030\002 \001(\010\022&\n\004type\030\003 \001(\0162\030.ra"
  "ftpb.StateMachineType\0320\n\016AddressesEntry\022"
  "\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\"\355\001\n\016Raft"
  "DataStatus\022\017\n\007address\030\001 \001(\t\022\017\n\007bin_ver\030\002"
  " \001(\r\022\021\n\thard_hash\030\003 \001(\004\022\022\n\nlogdb_type\030\004 "
  "\001(\t\022\020\n\010hostname\030\005 \001(\t\022\025\n\rdeployment_id\030\006"
  " \001(\004\022\031\n\021step_worker_count\030\007 \001(\004\022\031\n\021logdb"
  "_shard_count\030\010 \001(\004\022\031\n\021max_session_count\030"
  "\t \001(\004\022\030\n\020entry_batch_size\030\n \001(\004\"3\n\005State"
  "\022\014\n\004term\030\001 \001(\004\022\014\n\004vote\030\002 \001(\004\022\016\n\006commit\030\003"
  " \001(\004\"\233\001\n\005Entry\022\014\n\004term\030\001 \001(\004\022\r\n\005index\030\002 "
  "\001(\004\022\037\n\004type\030\003 \001(\0162\021.raftpb.EntryType\022\013\n\003"
  "key\030\004 \001(\004\022\021\n\tclient_id\030\005 \001(\004\022\021\n\tseries_i"
  "d\030\006 \001(\004\022\024\n\014responded_to\030\007 \001(\004\022\013\n\003cmd\030\010 \001"
  "(\014\",\n\nEntryBatch\022\036\n\007entries\030\001 \003(\0132\r.raft"
  "pb.Entry\"\300\003\n\nMembership\022\030\n\020config_change"
  "_id\030\001 \001(\004\0224\n\taddresses\030\002 \003(\0132!.raftpb.Me"
  "mbership.AddressesEntry\0220\n\007removed\030\003 \003(\013"
  "2\037.raftpb.Membership.RemovedEntry\0224\n\tobs"
  "ervers\030\004 \003(\0132!.raftpb.Membership.Observe"
  "rsEntry\0224\n\twitnesses\030\005 \003(\0132!.raftpb.Memb"
  "ership.WitnessesEntry\0320\n\016AddressesEntry\022"
  "\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014Remov"
  "edEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\010:\0028\001\032"
  "0\n\016ObserversEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\0320\n\016WitnessesEntry\022\013\n\003key\030\001 \001(\004"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"W\n\014SnapshotFile\022\021\n\tf"
  "ile_path\030\002 \001(\t\022\021\n\tfile_size\030\003 \001(\004\022\017\n\007fil"
  "e_id\030\004 \001(\004\022\020\n\010metadata\030\005 \001(\014\"\260\002\n\010Snapsho"
  "t\022\020\n\010filepath\030\002 \001(\t\022\021\n\tfile_size\030\003 \001(\004\022\r"
  "\n\005index\030\004 \001(\004\022\014\n\004term\030\005 \001(\004\022&\n\nmembershi"
  "p\030\006 \001(\0132\022.raftpb.Membership\022#\n\005files\030\007 \003"
  "(\0132\024.raftpb.SnapshotFile\022\020\n\010checksum\030\010 \001"
  "(\014\022\r\n\005dummy\030\t \001(\010\022\022\n\ncluster_id\030\n \001(\004\022&\n"
  "\004type\030\013 \001(\0162\030.raftpb.StateMachineType\022\020\n"
  "\010imported\030\014 \001(\010\022\025\n\ron_disk_index\030\r \001(\004\022\017"
  "\n\007witness\030\016 \001(\010\"\222\002\n\007Message\022!\n\004type\030\001 \001("
  "\0162\023.raftpb.MessageType\022\n\n\002to\030\002 \001(\004\022\014\n\004fr"
  "om\030\003 \001(\004\022\022\n\ncluster_id\030\004 \001(\004\022\014\n\004term\030\005 \001"
  "(\004\022\020\n\010log_term\030\006 \001(\004\022\021\n\tlog_index\030\007 \001(\004\022"
  "\016\n\006commit\030\010 \001(\004\022\016\n\006reject\030\t \001(\010\022\014\n\004hint\030"
  "\n \001(\004\022\036\n\007entries\030\013 \003(\0132\r.raftpb.Entry\022\"\n"
  "\010snapshot\030\014 \001(\0132\020.raftpb.Snapshot\022\021\n\thin"
  "t_high\030\r \001(\004\"\206\001\n\014ConfigChange\022\030\n\020config_"
  "change_id\030\001 \001(\004\022&\n\004type\030\002 \001(\0162\030.raftpb.C"
  "onfigChangeType\022\017\n\007node_id\030\003 \001(\004\022\017\n\007addr"
  "ess\030\004 \001(\t\022\022\n\ninitialize\030\005 \001(\010\"\221\002\n\016Snapsh"
  "otHeader\022\024\n\014session_size\030\001 \001(\004\022\027\n\017data_s"
  "tore_size\030\002 \001(\004\022\027\n\017unreliable_time\030\003 \001(\004"
  "\022\023\n\013git_version\030\004 \001(\t\022\027\n\017header_checksum"
  "\030\005 \001(\014\022\030\n\020payload_checksum\030\006 \001(\014\022+\n\rchec"
  "ksum_type\030\007 \001(\0162\024.raftpb.ChecksumType\022\017\n"
  "\007version\030\010 \001(\004\0221\n\020compression_type\030\t \001(\016"
  "2\027.raftpb.CompressionType\"q\n\014MessageBatc"
  "h\022!\n\010requests\030\001 \003(\0132\017.raftpb.Message\022\025\n\r"
  "deployment_id\030\002 \001(\004\022\026\n\016source_address\030\003 "
  "\001(\t\022\017\n\007bin_ver\030\004 \001(\r\"\237\003\n\rSnapshotChunk\022\022"
  "\n\ncluster_id\030\001 \001(\004\022\017\n\007node_id\030\002 \001(\004\022\014\n\004f"
  "rom\030\003 \001(\004\022\020\n\010chunk_id\030\004 \001(\004\022\022\n\nchunk_siz"
  "e\030\005 \001(\004\022\023\n\013chunk_count\030\006 \001(\004\022\014\n\004data\030\007 \001"
  "(\014\022\r\n\005index\030\010 \001(\004\022\014\n\004term\030\t \001(\004\022&\n\nmembe"
  "rship\030\n \001(\0132\022.raftpb.Membership\022\020\n\010filep"
  "ath\030\014 \001(\t\022\021\n\tfile_size\030\r \001(\004\022\025\n\rdeployme"
  "nt_id\030\016 \001(\004\022\025\n\rfile_chunk_id\030\017 \001(\004\022\030\n\020fi"
  "le_chunk_count\030\020 \001(\004\022\'\n\tfile_info\030\021 \001(\0132"
  "\024.raftpb.SnapshotFile\022\017\n\007bin_ver\030\022 \001(\r\022\025"
  "\n\ron_disk_index\030\023 \001(\004\022\017\n\007witness\030\024 \001(\010*\360"
  "\003\n\013MessageType\022\r\n\tLocalTick\020\000\022\014\n\010Electio"
  "n\020\001\022\023\n\017LeaderHeartbeat\020\002\022\025\n\021ConfigChange"
  "Event\020\003\022\010\n\004NoOP\020\004\022\010\n\004Ping\020\005\022\010\n\004Pong\020\006\022\013\n"
  "\007Propose\020\007\022\022\n\016SnapshotStatus\020\010\022\017\n\013Unreac"
  "hable\020\t\022\017\n\013CheckQuorum\020\n\022\024\n\020BatchedReadI"
  "ndex\020\013\022\r\n\tReplicate\020\014\022\021\n\rReplicateResp\020\r"
  "\022\017\n\013RequestVote\020\016\022\023\n\017RequestVoteResp\020\017\022\023"
  "\n\017InstallSnapshot\020\020\022\r\n\tHeartbeat\020\021\022\021\n\rHe"
  "artbeatResp\020\022\022\r\n\tReadIndex\020\023\022\021\n\rReadInde"
  "xResp\020\024\022\013\n\007Quiesce\020\025\022\024\n\020SnapshotReceived"
  "\020\026\022\022\n\016LeaderTransfer\020\027\022\016\n\nTimeoutNow\020\030\022\r"
  "\n\tRateLimit\020\031\022\022\n\016RequestPreVote\020\032\022\026\n\022Req"
  "uestPreVoteResp\020\033*]\n\tEntryType\022\024\n\020Applic"
  "ationEntry\020\000\022\025\n\021ConfigChangeEntry\020\001\022\020\n\014E"
  "ncodedEntry\020\002\022\021\n\rMetadataEntry\020\003*P\n\020Conf"
  "igChangeType\022\013\n\007AddNode\020\000\022\016\n\nRemoveNode\020"
  "\001\022\017\n\013AddObserver\020\002\022\016\n\nAddWitness\020\003*x\n\020St"
  "ateMachineType\022\027\n\023UnknownStateMachine\020\000\022"
  "\027\n\023RegularStateMachine\020\001\022\032\n\026ConcurrentSt"
  "ateMachine\020\002\022\026\n\022OnDiskStateMachine\020\003*0\n\017"
  "CompressionType\022\021\n\rNoCompression\020\000\022\n\n\006Sn"
  "appy\020\001**\n\014ChecksumType\022\r\n\tCRC32IEEE\020\000\022\013\n"
  "\007HIGHWAY\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raft_2eproto_sccs[18] = {
  &scc_info_Bootstrap_raft_2eproto.base,
  &scc_info_Bootstrap_AddressesEntry_DoNotUse_raft_2eproto.base,
  &scc_info_ConfigChange_raft_2eproto.base,
  &scc_info_Entry_raft_2eproto.base,
  &scc_info_EntryBatch_raft_2eproto.base,
  &scc_info_Membership_raft_2eproto.base,
  &scc_info_Membership_AddressesEntry_DoNotUse_raft_2eproto.base,
  &scc_info_Membership_ObserversEntry_DoNotUse_raft_2eproto.base,
  &scc_info_Membership_RemovedEntry_DoNotUse_raft_2eproto.base,
  &scc_info_Membership_WitnessesEntry_DoNotUse_raft_2eproto.base,
  &scc_info_Message_raft_2eproto.base,
  &scc_info_MessageBatch_raft_2eproto.base,
  &scc_info_RaftDataStatus_raft_2eproto.base,
  &scc_info_Snapshot_raft_2eproto.base,
  &scc_info_SnapshotChunk_raft_2eproto.base,
  &scc_info_SnapshotFile_raft_2eproto.base,
  &scc_info_SnapshotHeader_raft_2eproto.base,
  &scc_info_State_raft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_2eproto_once;
static bool descriptor_table_raft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto = {
  &descriptor_table_raft_2eproto_initialized, descriptor_table_protodef_raft_2eproto, "raft.proto", 3658,
  &descriptor_table_raft_2eproto_once, descriptor_table_raft_2eproto_sccs, descriptor_table_raft_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
  file_level_metadata_raft_2eproto, 18, file_level_enum_descriptors_raft_2eproto, file_level_service_descriptors_raft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raft_2eproto), true);
namespace raftpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[1];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[2];
}
bool ConfigChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateMachineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[3];
}
bool StateMachineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[4];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChecksumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[5];
}
bool ChecksumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Bootstrap_AddressesEntry_DoNotUse::Bootstrap_AddressesEntry_DoNotUse() {}
Bootstrap_AddressesEntry_DoNotUse::Bootstrap_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Bootstrap_AddressesEntry_DoNotUse::MergeFrom(const Bootstrap_AddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Bootstrap_AddressesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Bootstrap_AddressesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Bootstrap::InitAsDefaultInstance() {
}
class Bootstrap::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bootstrap::kAddressesFieldNumber;
const int Bootstrap::kJoinFieldNumber;
const int Bootstrap::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bootstrap::Bootstrap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.Bootstrap)
}
Bootstrap::Bootstrap(const Bootstrap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addresses_.MergeFrom(from.addresses_);
  ::memcpy(&join_, &from.join_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&join_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raftpb.Bootstrap)
}

void Bootstrap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bootstrap_raft_2eproto.base);
  ::memset(&join_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&join_)) + sizeof(type_));
}

Bootstrap::~Bootstrap() {
  // @@protoc_insertion_point(destructor:raftpb.Bootstrap)
  SharedDtor();
}

void Bootstrap::SharedDtor() {
}

void Bootstrap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bootstrap& Bootstrap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bootstrap_raft_2eproto.base);
  return *internal_default_instance();
}


void Bootstrap::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  ::memset(&join_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&join_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Bootstrap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, string> addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bool join = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.StateMachineType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::raftpb::StateMachineType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Bootstrap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.Bootstrap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint64, string> addresses = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          Bootstrap_AddressesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Bootstrap_AddressesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string > > parser(&addresses_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.Bootstrap.AddressesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool join = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.StateMachineType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raftpb::StateMachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.Bootstrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.Bootstrap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Bootstrap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> addresses = 1;
  if (!this->addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Bootstrap.AddressesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Bootstrap_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        Bootstrap_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool join = 2;
  if (this->join() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->join(), output);
  }

  // .raftpb.StateMachineType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.Bootstrap)
}

::PROTOBUF_NAMESPACE_ID::uint8* Bootstrap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> addresses = 1;
  if (!this->addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Bootstrap.AddressesEntry.value");
      }
    };

    if (false &&
        this->addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Bootstrap_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        Bootstrap_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool join = 2;
  if (this->join() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->join(), target);
  }

  // .raftpb.StateMachineType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.Bootstrap)
  return target;
}

size_t Bootstrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.Bootstrap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->addresses().begin();
      it != this->addresses().end(); ++it) {
    Bootstrap_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // bool join = 2;
  if (this->join() != 0) {
    total_size += 1 + 1;
  }

  // .raftpb.StateMachineType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bootstrap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  const Bootstrap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bootstrap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Bootstrap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Bootstrap)
    MergeFrom(*source);
  }
}

void Bootstrap::MergeFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from.join() != 0) {
    set_join(from.join());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Bootstrap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bootstrap::IsInitialized() const {
  return true;
}

void Bootstrap::Swap(Bootstrap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bootstrap::InternalSwap(Bootstrap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.Swap(&other->addresses_);
  swap(join_, other->join_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bootstrap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftDataStatus::InitAsDefaultInstance() {
}
class RaftDataStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftDataStatus::kAddressFieldNumber;
const int RaftDataStatus::kBinVerFieldNumber;
const int RaftDataStatus::kHardHashFieldNumber;
const int RaftDataStatus::kLogdbTypeFieldNumber;
const int RaftDataStatus::kHostnameFieldNumber;
const int RaftDataStatus::kDeploymentIdFieldNumber;
const int RaftDataStatus::kStepWorkerCountFieldNumber;
const int RaftDataStatus::kLogdbShardCountFieldNumber;
const int RaftDataStatus::kMaxSessionCountFieldNumber;
const int RaftDataStatus::kEntryBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftDataStatus::RaftDataStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.RaftDataStatus)
}
RaftDataStatus::RaftDataStatus(const RaftDataStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  logdb_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.logdb_type().size() > 0) {
    logdb_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logdb_type_);
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&hard_hash_, &from.hard_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_ver_) -
    reinterpret_cast<char*>(&hard_hash_)) + sizeof(bin_ver_));
  // @@protoc_insertion_point(copy_constructor:raftpb.RaftDataStatus)
}

void RaftDataStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftDataStatus_raft_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdb_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hard_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_ver_) -
      reinterpret_cast<char*>(&hard_hash_)) + sizeof(bin_ver_));
}

RaftDataStatus::~RaftDataStatus() {
  // @@protoc_insertion_point(destructor:raftpb.RaftDataStatus)
  SharedDtor();
}

void RaftDataStatus::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdb_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RaftDataStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftDataStatus& RaftDataStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftDataStatus_raft_2eproto.base);
  return *internal_default_instance();
}


void RaftDataStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.RaftDataStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdb_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hard_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_ver_) -
      reinterpret_cast<char*>(&hard_hash_)) + sizeof(bin_ver_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftDataStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "raftpb.RaftDataStatus.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bin_ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bin_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hard_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hard_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logdb_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_logdb_type(), ptr, ctx, "raftpb.RaftDataStatus.logdb_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hostname(), ptr, ctx, "raftpb.RaftDataStatus.hostname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 deployment_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 step_worker_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          step_worker_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 logdb_shard_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          logdb_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_session_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 entry_batch_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          entry_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftDataStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.RaftDataStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.RaftDataStatus.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bin_ver = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bin_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hard_hash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hard_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logdb_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_logdb_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->logdb_type().data(), static_cast<int>(this->logdb_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.RaftDataStatus.logdb_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostname = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.RaftDataStatus.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deployment_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deployment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 step_worker_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &step_worker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 logdb_shard_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logdb_shard_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_session_count = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_session_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 entry_batch_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.RaftDataStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.RaftDataStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftDataStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.RaftDataStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint32 bin_ver = 2;
  if (this->bin_ver() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->bin_ver(), output);
  }

  // uint64 hard_hash = 3;
  if (this->hard_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->hard_hash(), output);
  }

  // string logdb_type = 4;
  if (this->logdb_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logdb_type().data(), static_cast<int>(this->logdb_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.logdb_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logdb_type(), output);
  }

  // string hostname = 5;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.hostname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hostname(), output);
  }

  // uint64 deployment_id = 6;
  if (this->deployment_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->deployment_id(), output);
  }

  // uint64 step_worker_count = 7;
  if (this->step_worker_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->step_worker_count(), output);
  }

  // uint64 logdb_shard_count = 8;
  if (this->logdb_shard_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->logdb_shard_count(), output);
  }

  // uint64 max_session_count = 9;
  if (this->max_session_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->max_session_count(), output);
  }

  // uint64 entry_batch_size = 10;
  if (this->entry_batch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->entry_batch_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.RaftDataStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftDataStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.RaftDataStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint32 bin_ver = 2;
  if (this->bin_ver() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->bin_ver(), target);
  }

  // uint64 hard_hash = 3;
  if (this->hard_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->hard_hash(), target);
  }

  // string logdb_type = 4;
  if (this->logdb_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->logdb_type().data(), static_cast<int>(this->logdb_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.logdb_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->logdb_type(), target);
  }

  // string hostname = 5;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.RaftDataStatus.hostname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->hostname(), target);
  }

  // uint64 deployment_id = 6;
  if (this->deployment_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->deployment_id(), target);
  }

  // uint64 step_worker_count = 7;
  if (this->step_worker_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->step_worker_count(), target);
  }

  // uint64 logdb_shard_count = 8;
  if (this->logdb_shard_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->logdb_shard_count(), target);
  }

  // uint64 max_session_count = 9;
  if (this->max_session_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->max_session_count(), target);
  }

  // uint64 entry_batch_size = 10;
  if (this->entry_batch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->entry_batch_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.RaftDataStatus)
  return target;
}

size_t RaftDataStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.RaftDataStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string logdb_type = 4;
  if (this->logdb_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->logdb_type());
  }

  // string hostname = 5;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // uint64 hard_hash = 3;
  if (this->hard_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hard_hash());
  }

  // uint64 deployment_id = 6;
  if (this->deployment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->deployment_id());
  }

  // uint64 step_worker_count = 7;
  if (this->step_worker_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->step_worker_count());
  }

  // uint64 logdb_shard_count = 8;
  if (this->logdb_shard_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->logdb_shard_count());
  }

  // uint64 max_session_count = 9;
  if (this->max_session_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_session_count());
  }

  // uint64 entry_batch_size = 10;
  if (this->entry_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->entry_batch_size());
  }

  // uint32 bin_ver = 2;
  if (this->bin_ver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bin_ver());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftDataStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.RaftDataStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftDataStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftDataStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.RaftDataStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.RaftDataStatus)
    MergeFrom(*source);
  }
}

void RaftDataStatus::MergeFrom(const RaftDataStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.RaftDataStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.logdb_type().size() > 0) {

    logdb_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logdb_type_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.hard_hash() != 0) {
    set_hard_hash(from.hard_hash());
  }
  if (from.deployment_id() != 0) {
    set_deployment_id(from.deployment_id());
  }
  if (from.step_worker_count() != 0) {
    set_step_worker_count(from.step_worker_count());
  }
  if (from.logdb_shard_count() != 0) {
    set_logdb_shard_count(from.logdb_shard_count());
  }
  if (from.max_session_count() != 0) {
    set_max_session_count(from.max_session_count());
  }
  if (from.entry_batch_size() != 0) {
    set_entry_batch_size(from.entry_batch_size());
  }
  if (from.bin_ver() != 0) {
    set_bin_ver(from.bin_ver());
  }
}

void RaftDataStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.RaftDataStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftDataStatus::CopyFrom(const RaftDataStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.RaftDataStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftDataStatus::IsInitialized() const {
  return true;
}

void RaftDataStatus::Swap(RaftDataStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftDataStatus::InternalSwap(RaftDataStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logdb_type_.Swap(&other->logdb_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hard_hash_, other->hard_hash_);
  swap(deployment_id_, other->deployment_id_);
  swap(step_worker_count_, other->step_worker_count_);
  swap(logdb_shard_count_, other->logdb_shard_count_);
  swap(max_session_count_, other->max_session_count_);
  swap(entry_batch_size_, other->entry_batch_size_);
  swap(bin_ver_, other->bin_ver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftDataStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
class State::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kTermFieldNumber;
const int State::kVoteFieldNumber;
const int State::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(commit_));
  // @@protoc_insertion_point(copy_constructor:raftpb.State)
}

void State::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commit_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:raftpb.State)
  SharedDtor();
}

void State::SharedDtor() {
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_raft_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool State::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.State)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 vote = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.State)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void State::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // uint64 vote = 2;
  if (this->vote() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->vote(), output);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.State)
}

::PROTOBUF_NAMESPACE_ID::uint8* State::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // uint64 vote = 2;
  if (this->vote() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->vote(), target);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 vote = 2;
  if (this->vote() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->vote());
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.vote() != 0) {
    set_vote(from.vote());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(vote_, other->vote_);
  swap(commit_, other->commit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
}
class Entry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTermFieldNumber;
const int Entry::kIndexFieldNumber;
const int Entry::kTypeFieldNumber;
const int Entry::kKeyFieldNumber;
const int Entry::kClientIdFieldNumber;
const int Entry::kSeriesIdFieldNumber;
const int Entry::kRespondedToFieldNumber;
const int Entry::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raftpb.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_raft_2eproto.base);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:raftpb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_raft_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.EntryType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::raftpb::EntryType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 client_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 series_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 responded_to = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          responded_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cmd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.EntryType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raftpb::EntryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 client_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 series_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 responded_to = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &responded_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cmd = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // .raftpb.EntryType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // uint64 key = 4;
  if (this->key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->key(), output);
  }

  // uint64 client_id = 5;
  if (this->client_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->client_id(), output);
  }

  // uint64 series_id = 6;
  if (this->series_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->series_id(), output);
  }

  // uint64 responded_to = 7;
  if (this->responded_to() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->responded_to(), output);
  }

  // bytes cmd = 8;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // .raftpb.EntryType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // uint64 key = 4;
  if (this->key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->key(), target);
  }

  // uint64 client_id = 5;
  if (this->client_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->client_id(), target);
  }

  // uint64 series_id = 6;
  if (this->series_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->series_id(), target);
  }

  // uint64 responded_to = 7;
  if (this->responded_to() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->responded_to(), target);
  }

  // bytes cmd = 8;
  if (this->cmd().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cmd = 8;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->cmd());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 key = 4;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // uint64 client_id = 5;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->client_id());
  }

  // uint64 series_id = 6;
  if (this->series_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->series_id());
  }

  // uint64 responded_to = 7;
  if (this->responded_to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->responded_to());
  }

  // .raftpb.EntryType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
  if (from.series_id() != 0) {
    set_series_id(from.series_id());
  }
  if (from.responded_to() != 0) {
    set_responded_to(from.responded_to());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(index_, other->index_);
  swap(key_, other->key_);
  swap(client_id_, other->client_id_);
  swap(series_id_, other->series_id_);
  swap(responded_to_, other->responded_to_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntryBatch::InitAsDefaultInstance() {
}
class EntryBatch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryBatch::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryBatch::EntryBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.EntryBatch)
}
EntryBatch::EntryBatch(const EntryBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raftpb.EntryBatch)
}

void EntryBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntryBatch_raft_2eproto.base);
}

EntryBatch::~EntryBatch() {
  // @@protoc_insertion_point(destructor:raftpb.EntryBatch)
  SharedDtor();
}

void EntryBatch::SharedDtor() {
}

void EntryBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntryBatch& EntryBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntryBatch_raft_2eproto.base);
  return *internal_default_instance();
}


void EntryBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.EntryBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EntryBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .raftpb.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EntryBatch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.EntryBatch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .raftpb.Entry entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.EntryBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.EntryBatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EntryBatch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.EntryBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raftpb.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.EntryBatch)
}

::PROTOBUF_NAMESPACE_ID::uint8* EntryBatch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.EntryBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raftpb.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.EntryBatch)
  return target;
}

size_t EntryBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.EntryBatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftpb.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntryBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.EntryBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntryBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.EntryBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.EntryBatch)
    MergeFrom(*source);
  }
}

void EntryBatch::MergeFrom(const EntryBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.EntryBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void EntryBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.EntryBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryBatch::CopyFrom(const EntryBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.EntryBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryBatch::IsInitialized() const {
  return true;
}

void EntryBatch::Swap(EntryBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntryBatch::InternalSwap(EntryBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Membership_AddressesEntry_DoNotUse::Membership_AddressesEntry_DoNotUse() {}
Membership_AddressesEntry_DoNotUse::Membership_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Membership_AddressesEntry_DoNotUse::MergeFrom(const Membership_AddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Membership_AddressesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Membership_AddressesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Membership_RemovedEntry_DoNotUse::Membership_RemovedEntry_DoNotUse() {}
Membership_RemovedEntry_DoNotUse::Membership_RemovedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Membership_RemovedEntry_DoNotUse::MergeFrom(const Membership_RemovedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Membership_RemovedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Membership_RemovedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Membership_ObserversEntry_DoNotUse::Membership_ObserversEntry_DoNotUse() {}
Membership_ObserversEntry_DoNotUse::Membership_ObserversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Membership_ObserversEntry_DoNotUse::MergeFrom(const Membership_ObserversEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Membership_ObserversEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Membership_ObserversEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Membership_WitnessesEntry_DoNotUse::Membership_WitnessesEntry_DoNotUse() {}
Membership_WitnessesEntry_DoNotUse::Membership_WitnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Membership_WitnessesEntry_DoNotUse::MergeFrom(const Membership_WitnessesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Membership_WitnessesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Membership_WitnessesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Membership::InitAsDefaultInstance() {
}
class Membership::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Membership::kConfigChangeIdFieldNumber;
const int Membership::kAddressesFieldNumber;
const int Membership::kRemovedFieldNumber;
const int Membership::kObserversFieldNumber;
const int Membership::kWitnessesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Membership::Membership()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.Membership)
}
Membership::Membership(const Membership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addresses_.MergeFrom(from.addresses_);
  removed_.MergeFrom(from.removed_);
  observers_.MergeFrom(from.observers_);
  witnesses_.MergeFrom(from.witnesses_);
  config_change_id_ = from.config_change_id_;
  // @@protoc_insertion_point(copy_constructor:raftpb.Membership)
}

void Membership::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Membership_raft_2eproto.base);
  config_change_id_ = PROTOBUF_ULONGLONG(0);
}

Membership::~Membership() {
  // @@protoc_insertion_point(destructor:raftpb.Membership)
  SharedDtor();
}

void Membership::SharedDtor() {
}

void Membership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Membership& Membership::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Membership_raft_2eproto.base);
  return *internal_default_instance();
}


void Membership::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.Membership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  removed_.Clear();
  observers_.Clear();
  witnesses_.Clear();
  config_change_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Membership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 config_change_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          config_change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, string> addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<uint64, bool> removed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&removed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<uint64, string> observers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&observers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<uint64, string> witnesses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&witnesses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Membership::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.Membership)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 config_change_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &config_change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, string> addresses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          Membership_AddressesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Membership_AddressesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string > > parser(&addresses_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.Membership.AddressesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, bool> removed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          Membership_RemovedEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Membership_RemovedEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, bool,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool > > parser(&removed_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, string> observers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          Membership_ObserversEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Membership_ObserversEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string > > parser(&observers_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.Membership.ObserversEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, string> witnesses = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          Membership_WitnessesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Membership_WitnessesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string > > parser(&witnesses_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.Membership.WitnessesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.Membership)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Membership::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.Membership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->config_change_id(), output);
  }

  // map<uint64, string> addresses = 2;
  if (!this->addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.AddressesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        Membership_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint64, bool> removed = 3;
  if (!this->removed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->removed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_iterator
          it = this->removed().begin();
          it != this->removed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_RemovedEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_iterator
          it = this->removed().begin();
          it != this->removed().end(); ++it) {
        Membership_RemovedEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
      }
    }
  }

  // map<uint64, string> observers = 4;
  if (!this->observers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.ObserversEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->observers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->observers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->observers().begin();
          it != this->observers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_ObserversEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->observers().begin();
          it != this->observers().end(); ++it) {
        Membership_ObserversEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint64, string> witnesses = 5;
  if (!this->witnesses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.WitnessesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->witnesses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->witnesses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->witnesses().begin();
          it != this->witnesses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_WitnessesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->witnesses().begin();
          it != this->witnesses().end(); ++it) {
        Membership_WitnessesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.Membership)
}

::PROTOBUF_NAMESPACE_ID::uint8* Membership::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.Membership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->config_change_id(), target);
  }

  // map<uint64, string> addresses = 2;
  if (!this->addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.AddressesEntry.value");
      }
    };

    if (false &&
        this->addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->addresses().begin();
          it != this->addresses().end(); ++it) {
        Membership_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint64, bool> removed = 3;
  if (!this->removed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->removed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_iterator
          it = this->removed().begin();
          it != this->removed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_RemovedEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_iterator
          it = this->removed().begin();
          it != this->removed().end(); ++it) {
        Membership_RemovedEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
      }
    }
  }

  // map<uint64, string> observers = 4;
  if (!this->observers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.ObserversEntry.value");
      }
    };

    if (false &&
        this->observers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->observers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->observers().begin();
          it != this->observers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_ObserversEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->observers().begin();
          it != this->observers().end(); ++it) {
        Membership_ObserversEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint64, string> witnesses = 5;
  if (!this->witnesses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raftpb.Membership.WitnessesEntry.value");
      }
    };

    if (false &&
        this->witnesses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->witnesses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->witnesses().begin();
          it != this->witnesses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Membership_WitnessesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->witnesses().begin();
          it != this->witnesses().end(); ++it) {
        Membership_WitnessesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.Membership)
  return target;
}

size_t Membership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.Membership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->addresses().begin();
      it != this->addresses().end(); ++it) {
    Membership_AddressesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<uint64, bool> removed = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->removed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, bool >::const_iterator
      it = this->removed().begin();
      it != this->removed().end(); ++it) {
    Membership_RemovedEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<uint64, string> observers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->observers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->observers().begin();
      it != this->observers().end(); ++it) {
    Membership_ObserversEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<uint64, string> witnesses = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->witnesses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->witnesses().begin();
      it != this->witnesses().end(); ++it) {
    Membership_WitnessesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->config_change_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Membership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  const Membership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Membership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Membership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Membership)
    MergeFrom(*source);
  }
}

void Membership::MergeFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  removed_.MergeFrom(from.removed_);
  observers_.MergeFrom(from.observers_);
  witnesses_.MergeFrom(from.witnesses_);
  if (from.config_change_id() != 0) {
    set_config_change_id(from.config_change_id());
  }
}

void Membership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Membership::CopyFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Membership::IsInitialized() const {
  return true;
}

void Membership::Swap(Membership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Membership::InternalSwap(Membership* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.Swap(&other->addresses_);
  removed_.Swap(&other->removed_);
  observers_.Swap(&other->observers_);
  witnesses_.Swap(&other->witnesses_);
  swap(config_change_id_, other->config_change_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Membership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotFile::InitAsDefaultInstance() {
}
class SnapshotFile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotFile::kFilePathFieldNumber;
const int SnapshotFile::kFileSizeFieldNumber;
const int SnapshotFile::kFileIdFieldNumber;
const int SnapshotFile::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotFile::SnapshotFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.SnapshotFile)
}
SnapshotFile::SnapshotFile(const SnapshotFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_id_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(file_id_));
  // @@protoc_insertion_point(copy_constructor:raftpb.SnapshotFile)
}

void SnapshotFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotFile_raft_2eproto.base);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_id_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(file_id_));
}

SnapshotFile::~SnapshotFile() {
  // @@protoc_insertion_point(destructor:raftpb.SnapshotFile)
  SharedDtor();
}

void SnapshotFile::SharedDtor() {
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotFile& SnapshotFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotFile_raft_2eproto.base);
  return *internal_default_instance();
}


void SnapshotFile::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.SnapshotFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_id_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(file_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "raftpb.SnapshotFile.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotFile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.SnapshotFile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.SnapshotFile.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.SnapshotFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.SnapshotFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotFile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.SnapshotFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotFile.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // uint64 file_id = 4;
  if (this->file_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->file_id(), output);
  }

  // bytes metadata = 5;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.SnapshotFile)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotFile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.SnapshotFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotFile.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // uint64 file_id = 4;
  if (this->file_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->file_id(), target);
  }

  // bytes metadata = 5;
  if (this->metadata().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.SnapshotFile)
  return target;
}

size_t SnapshotFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.SnapshotFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // bytes metadata = 5;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint64 file_id = 4;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.SnapshotFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.SnapshotFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.SnapshotFile)
    MergeFrom(*source);
  }
}

void SnapshotFile::MergeFrom(const SnapshotFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.SnapshotFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
}

void SnapshotFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.SnapshotFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotFile::CopyFrom(const SnapshotFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.SnapshotFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotFile::IsInitialized() const {
  return true;
}

void SnapshotFile::Swap(SnapshotFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotFile::InternalSwap(SnapshotFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(file_id_, other->file_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::raftpb::_Snapshot_default_instance_._instance.get_mutable()->membership_ = const_cast< ::raftpb::Membership*>(
      ::raftpb::Membership::internal_default_instance());
}
class Snapshot::HasBitSetters {
 public:
  static const ::raftpb::Membership& membership(const Snapshot* msg);
};

const ::raftpb::Membership&
Snapshot::HasBitSetters::membership(const Snapshot* msg) {
  return *msg->membership_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kFilepathFieldNumber;
const int Snapshot::kFileSizeFieldNumber;
const int Snapshot::kIndexFieldNumber;
const int Snapshot::kTermFieldNumber;
const int Snapshot::kMembershipFieldNumber;
const int Snapshot::kFilesFieldNumber;
const int Snapshot::kChecksumFieldNumber;
const int Snapshot::kDummyFieldNumber;
const int Snapshot::kClusterIdFieldNumber;
const int Snapshot::kTypeFieldNumber;
const int Snapshot::kImportedFieldNumber;
const int Snapshot::kOnDiskIndexFieldNumber;
const int Snapshot::kWitnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.checksum().size() > 0) {
    checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  if (from.has_membership()) {
    membership_ = new ::raftpb::Membership(*from.membership_);
  } else {
    membership_ = nullptr;
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_disk_index_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(on_disk_index_));
  // @@protoc_insertion_point(copy_constructor:raftpb.Snapshot)
}

void Snapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Snapshot_raft_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&membership_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_disk_index_) -
      reinterpret_cast<char*>(&membership_)) + sizeof(on_disk_index_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:raftpb.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete membership_;
}

void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snapshot& Snapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Snapshot_raft_2eproto.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && membership_ != nullptr) {
    delete membership_;
  }
  membership_ = nullptr;
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_disk_index_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(on_disk_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filepath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filepath(), ptr, ctx, "raftpb.Snapshot.filepath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.Membership membership = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_membership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raftpb.SnapshotFile files = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // bytes checksum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_checksum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dummy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cluster_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.StateMachineType type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::raftpb::StateMachineType>(val));
        } else goto handle_unusual;
        continue;
      // bool imported = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          imported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 on_disk_index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          on_disk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool witness = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          witness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Snapshot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.Snapshot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filepath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.Snapshot.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.Membership membership = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_membership()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raftpb.SnapshotFile files = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes checksum = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dummy = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cluster_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.StateMachineType type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raftpb::StateMachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool imported = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 on_disk_index = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &on_disk_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool witness = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &witness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.Snapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Snapshot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 2;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.Snapshot.filepath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filepath(), output);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // uint64 index = 4;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->index(), output);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // .raftpb.Membership membership = 6;
  if (this->has_membership()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::membership(this), output);
  }

  // repeated .raftpb.SnapshotFile files = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->files(static_cast<int>(i)),
      output);
  }

  // bytes checksum = 8;
  if (this->checksum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->checksum(), output);
  }

  // bool dummy = 9;
  if (this->dummy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->dummy(), output);
  }

  // uint64 cluster_id = 10;
  if (this->cluster_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->cluster_id(), output);
  }

  // .raftpb.StateMachineType type = 11;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->type(), output);
  }

  // bool imported = 12;
  if (this->imported() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->imported(), output);
  }

  // uint64 on_disk_index = 13;
  if (this->on_disk_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->on_disk_index(), output);
  }

  // bool witness = 14;
  if (this->witness() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->witness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.Snapshot)
}

::PROTOBUF_NAMESPACE_ID::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 2;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.Snapshot.filepath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // uint64 index = 4;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->index(), target);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // .raftpb.Membership membership = 6;
  if (this->has_membership()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::membership(this), target);
  }

  // repeated .raftpb.SnapshotFile files = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->files(static_cast<int>(i)), target);
  }

  // bytes checksum = 8;
  if (this->checksum().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->checksum(), target);
  }

  // bool dummy = 9;
  if (this->dummy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->dummy(), target);
  }

  // uint64 cluster_id = 10;
  if (this->cluster_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->cluster_id(), target);
  }

  // .raftpb.StateMachineType type = 11;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->type(), target);
  }

  // bool imported = 12;
  if (this->imported() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->imported(), target);
  }

  // uint64 on_disk_index = 13;
  if (this->on_disk_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->on_disk_index(), target);
  }

  // bool witness = 14;
  if (this->witness() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->witness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.Snapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftpb.SnapshotFile files = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  // string filepath = 2;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // bytes checksum = 8;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->checksum());
  }

  // .raftpb.Membership membership = 6;
  if (this->has_membership()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *membership_);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint64 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 cluster_id = 10;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // .raftpb.StateMachineType type = 11;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool dummy = 9;
  if (this->dummy() != 0) {
    total_size += 1 + 1;
  }

  // bool imported = 12;
  if (this->imported() != 0) {
    total_size += 1 + 1;
  }

  // bool witness = 14;
  if (this->witness() != 0) {
    total_size += 1 + 1;
  }

  // uint64 on_disk_index = 13;
  if (this->on_disk_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->on_disk_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Snapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.checksum().size() > 0) {

    checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  if (from.has_membership()) {
    mutable_membership()->::raftpb::Membership::MergeFrom(from.membership());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
  if (from.imported() != 0) {
    set_imported(from.imported());
  }
  if (from.witness() != 0) {
    set_witness(from.witness());
  }
  if (from.on_disk_index() != 0) {
    set_on_disk_index(from.on_disk_index());
  }
}

void Snapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checksum_.Swap(&other->checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(membership_, other->membership_);
  swap(file_size_, other->file_size_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(cluster_id_, other->cluster_id_);
  swap(type_, other->type_);
  swap(dummy_, other->dummy_);
  swap(imported_, other->imported_);
  swap(witness_, other->witness_);
  swap(on_disk_index_, other->on_disk_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::raftpb::_Message_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::raftpb::Snapshot*>(
      ::raftpb::Snapshot::internal_default_instance());
}
class Message::HasBitSetters {
 public:
  static const ::raftpb::Snapshot& snapshot(const Message* msg);
};

const ::raftpb::Snapshot&
Message::HasBitSetters::snapshot(const Message* msg) {
  return *msg->snapshot_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kToFieldNumber;
const int Message::kFromFieldNumber;
const int Message::kClusterIdFieldNumber;
const int Message::kTermFieldNumber;
const int Message::kLogTermFieldNumber;
const int Message::kLogIndexFieldNumber;
const int Message::kCommitFieldNumber;
const int Message::kRejectFieldNumber;
const int Message::kHintFieldNumber;
const int Message::kEntriesFieldNumber;
const int Message::kSnapshotFieldNumber;
const int Message::kHintHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot()) {
    snapshot_ = new ::raftpb::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  ::memcpy(&to_, &from.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&hint_high_) -
    reinterpret_cast<char*>(&to_)) + sizeof(hint_high_));
  // @@protoc_insertion_point(copy_constructor:raftpb.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_raft_2eproto.base);
  ::memset(&snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hint_high_) -
      reinterpret_cast<char*>(&snapshot_)) + sizeof(hint_high_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:raftpb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete snapshot_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_raft_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hint_high_) -
      reinterpret_cast<char*>(&to_)) + sizeof(hint_high_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raftpb.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::raftpb::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cluster_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 log_term = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 log_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raftpb.Entry entries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // .raftpb.Snapshot snapshot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hint_high = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hint_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.Message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raftpb.MessageType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raftpb::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 to = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 from = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cluster_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_term = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_index = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reject = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raftpb.Entry entries = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.Snapshot snapshot = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hint_high = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hint_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raftpb.MessageType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
  }

  // uint64 cluster_id = 4;
  if (this->cluster_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->cluster_id(), output);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // uint64 log_term = 6;
  if (this->log_term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->log_term(), output);
  }

  // uint64 log_index = 7;
  if (this->log_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->log_index(), output);
  }

  // uint64 commit = 8;
  if (this->commit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->commit(), output);
  }

  // bool reject = 9;
  if (this->reject() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->reject(), output);
  }

  // uint64 hint = 10;
  if (this->hint() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->hint(), output);
  }

  // repeated .raftpb.Entry entries = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->entries(static_cast<int>(i)),
      output);
  }

  // .raftpb.Snapshot snapshot = 12;
  if (this->has_snapshot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::snapshot(this), output);
  }

  // uint64 hint_high = 13;
  if (this->hint_high() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->hint_high(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.Message)
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raftpb.MessageType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
  }

  // uint64 cluster_id = 4;
  if (this->cluster_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->cluster_id(), target);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // uint64 log_term = 6;
  if (this->log_term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->log_term(), target);
  }

  // uint64 log_index = 7;
  if (this->log_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_index(), target);
  }

  // uint64 commit = 8;
  if (this->commit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->commit(), target);
  }

  // bool reject = 9;
  if (this->reject() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->reject(), target);
  }

  // uint64 hint = 10;
  if (this->hint() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->hint(), target);
  }

  // repeated .raftpb.Entry entries = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->entries(static_cast<int>(i)), target);
  }

  // .raftpb.Snapshot snapshot = 12;
  if (this->has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::snapshot(this), target);
  }

  // uint64 hint_high = 13;
  if (this->hint_high() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->hint_high(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftpb.Entry entries = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // .raftpb.Snapshot snapshot = 12;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->to());
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->from());
  }

  // uint64 cluster_id = 4;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // .raftpb.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool reject = 9;
  if (this->reject() != 0) {
    total_size += 1 + 1;
  }

  // uint64 log_term = 6;
  if (this->log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->log_term());
  }

  // uint64 log_index = 7;
  if (this->log_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->log_index());
  }

  // uint64 commit = 8;
  if (this->commit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 hint = 10;
  if (this->hint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hint());
  }

  // uint64 hint_high = 13;
  if (this->hint_high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hint_high());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_snapshot()) {
    mutable_snapshot()->::raftpb::Snapshot::MergeFrom(from.snapshot());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.reject() != 0) {
    set_reject(from.reject());
  }
  if (from.log_term() != 0) {
    set_log_term(from.log_term());
  }
  if (from.log_index() != 0) {
    set_log_index(from.log_index());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.hint() != 0) {
    set_hint(from.hint());
  }
  if (from.hint_high() != 0) {
    set_hint_high(from.hint_high());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(snapshot_, other->snapshot_);
  swap(to_, other->to_);
  swap(from_, other->from_);
  swap(cluster_id_, other->cluster_id_);
  swap(term_, other->term_);
  swap(type_, other->type_);
  swap(reject_, other->reject_);
  swap(log_term_, other->log_term_);
  swap(log_index_, other->log_index_);
  swap(commit_, other->commit_);
  swap(hint_, other->hint_);
  swap(hint_high_, other->hint_high_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigChange::InitAsDefaultInstance() {
}
class ConfigChange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigChange::kConfigChangeIdFieldNumber;
const int ConfigChange::kTypeFieldNumber;
const int ConfigChange::kNodeIdFieldNumber;
const int ConfigChange::kAddressFieldNumber;
const int ConfigChange::kInitializeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigChange::ConfigChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.ConfigChange)
}
ConfigChange::ConfigChange(const ConfigChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&config_change_id_, &from.config_change_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&initialize_) -
    reinterpret_cast<char*>(&config_change_id_)) + sizeof(initialize_));
  // @@protoc_insertion_point(copy_constructor:raftpb.ConfigChange)
}

void ConfigChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigChange_raft_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_change_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialize_) -
      reinterpret_cast<char*>(&config_change_id_)) + sizeof(initialize_));
}

ConfigChange::~ConfigChange() {
  // @@protoc_insertion_point(destructor:raftpb.ConfigChange)
  SharedDtor();
}

void ConfigChange::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigChange& ConfigChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigChange_raft_2eproto.base);
  return *internal_default_instance();
}


void ConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.ConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_change_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialize_) -
      reinterpret_cast<char*>(&config_change_id_)) + sizeof(initialize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 config_change_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          config_change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.ConfigChangeType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::raftpb::ConfigChangeType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "raftpb.ConfigChange.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool initialize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          initialize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.ConfigChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 config_change_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &config_change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.ConfigChangeType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raftpb::ConfigChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.ConfigChange.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool initialize = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.ConfigChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.ConfigChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.ConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->config_change_id(), output);
  }

  // .raftpb.ConfigChangeType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->node_id(), output);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.ConfigChange.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // bool initialize = 5;
  if (this->initialize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->initialize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.ConfigChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.ConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->config_change_id(), target);
  }

  // .raftpb.ConfigChangeType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->node_id(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.ConfigChange.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // bool initialize = 5;
  if (this->initialize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->initialize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.ConfigChange)
  return target;
}

size_t ConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.ConfigChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint64 config_change_id = 1;
  if (this->config_change_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->config_change_id());
  }

  // uint64 node_id = 3;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // .raftpb.ConfigChangeType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool initialize = 5;
  if (this->initialize() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.ConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.ConfigChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.ConfigChange)
    MergeFrom(*source);
  }
}

void ConfigChange::MergeFrom(const ConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.ConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.config_change_id() != 0) {
    set_config_change_id(from.config_change_id());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.initialize() != 0) {
    set_initialize(from.initialize());
  }
}

void ConfigChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.ConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigChange::CopyFrom(const ConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.ConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigChange::IsInitialized() const {
  return true;
}

void ConfigChange::Swap(ConfigChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigChange::InternalSwap(ConfigChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_change_id_, other->config_change_id_);
  swap(node_id_, other->node_id_);
  swap(type_, other->type_);
  swap(initialize_, other->initialize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotHeader::InitAsDefaultInstance() {
}
class SnapshotHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotHeader::kSessionSizeFieldNumber;
const int SnapshotHeader::kDataStoreSizeFieldNumber;
const int SnapshotHeader::kUnreliableTimeFieldNumber;
const int SnapshotHeader::kGitVersionFieldNumber;
const int SnapshotHeader::kHeaderChecksumFieldNumber;
const int SnapshotHeader::kPayloadChecksumFieldNumber;
const int SnapshotHeader::kChecksumTypeFieldNumber;
const int SnapshotHeader::kVersionFieldNumber;
const int SnapshotHeader::kCompressionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotHeader::SnapshotHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.SnapshotHeader)
}
SnapshotHeader::SnapshotHeader(const SnapshotHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  git_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.git_version().size() > 0) {
    git_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_version_);
  }
  header_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.header_checksum().size() > 0) {
    header_checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_checksum_);
  }
  payload_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.payload_checksum().size() > 0) {
    payload_checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_checksum_);
  }
  ::memcpy(&session_size_, &from.session_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_type_) -
    reinterpret_cast<char*>(&session_size_)) + sizeof(compression_type_));
  // @@protoc_insertion_point(copy_constructor:raftpb.SnapshotHeader)
}

void SnapshotHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotHeader_raft_2eproto.base);
  git_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_type_) -
      reinterpret_cast<char*>(&session_size_)) + sizeof(compression_type_));
}

SnapshotHeader::~SnapshotHeader() {
  // @@protoc_insertion_point(destructor:raftpb.SnapshotHeader)
  SharedDtor();
}

void SnapshotHeader::SharedDtor() {
  git_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotHeader& SnapshotHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotHeader_raft_2eproto.base);
  return *internal_default_instance();
}


void SnapshotHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.SnapshotHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  git_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_checksum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_type_) -
      reinterpret_cast<char*>(&session_size_)) + sizeof(compression_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data_store_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_store_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unreliable_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unreliable_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_git_version(), ptr, ctx, "raftpb.SnapshotHeader.git_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes header_checksum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header_checksum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload_checksum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload_checksum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.ChecksumType checksum_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_checksum_type(static_cast<::raftpb::ChecksumType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.CompressionType compression_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_compression_type(static_cast<::raftpb::CompressionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.SnapshotHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 session_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 data_store_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_store_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unreliable_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unreliable_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string git_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_git_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->git_version().data(), static_cast<int>(this->git_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.SnapshotHeader.git_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes header_checksum = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload_checksum = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.ChecksumType checksum_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_checksum_type(static_cast< ::raftpb::ChecksumType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.CompressionType compression_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compression_type(static_cast< ::raftpb::CompressionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.SnapshotHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.SnapshotHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.SnapshotHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_size = 1;
  if (this->session_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->session_size(), output);
  }

  // uint64 data_store_size = 2;
  if (this->data_store_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->data_store_size(), output);
  }

  // uint64 unreliable_time = 3;
  if (this->unreliable_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->unreliable_time(), output);
  }

  // string git_version = 4;
  if (this->git_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->git_version().data(), static_cast<int>(this->git_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotHeader.git_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->git_version(), output);
  }

  // bytes header_checksum = 5;
  if (this->header_checksum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->header_checksum(), output);
  }

  // bytes payload_checksum = 6;
  if (this->payload_checksum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->payload_checksum(), output);
  }

  // .raftpb.ChecksumType checksum_type = 7;
  if (this->checksum_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->checksum_type(), output);
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->version(), output);
  }

  // .raftpb.CompressionType compression_type = 9;
  if (this->compression_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->compression_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.SnapshotHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.SnapshotHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_size = 1;
  if (this->session_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->session_size(), target);
  }

  // uint64 data_store_size = 2;
  if (this->data_store_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->data_store_size(), target);
  }

  // uint64 unreliable_time = 3;
  if (this->unreliable_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->unreliable_time(), target);
  }

  // string git_version = 4;
  if (this->git_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->git_version().data(), static_cast<int>(this->git_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotHeader.git_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->git_version(), target);
  }

  // bytes header_checksum = 5;
  if (this->header_checksum().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->header_checksum(), target);
  }

  // bytes payload_checksum = 6;
  if (this->payload_checksum().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->payload_checksum(), target);
  }

  // .raftpb.ChecksumType checksum_type = 7;
  if (this->checksum_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->checksum_type(), target);
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->version(), target);
  }

  // .raftpb.CompressionType compression_type = 9;
  if (this->compression_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->compression_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.SnapshotHeader)
  return target;
}

size_t SnapshotHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.SnapshotHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string git_version = 4;
  if (this->git_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->git_version());
  }

  // bytes header_checksum = 5;
  if (this->header_checksum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->header_checksum());
  }

  // bytes payload_checksum = 6;
  if (this->payload_checksum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->payload_checksum());
  }

  // uint64 session_size = 1;
  if (this->session_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->session_size());
  }

  // uint64 data_store_size = 2;
  if (this->data_store_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->data_store_size());
  }

  // uint64 unreliable_time = 3;
  if (this->unreliable_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->unreliable_time());
  }

  // uint64 version = 8;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // .raftpb.ChecksumType checksum_type = 7;
  if (this->checksum_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->checksum_type());
  }

  // .raftpb.CompressionType compression_type = 9;
  if (this->compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compression_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.SnapshotHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.SnapshotHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.SnapshotHeader)
    MergeFrom(*source);
  }
}

void SnapshotHeader::MergeFrom(const SnapshotHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.SnapshotHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.git_version().size() > 0) {

    git_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_version_);
  }
  if (from.header_checksum().size() > 0) {

    header_checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_checksum_);
  }
  if (from.payload_checksum().size() > 0) {

    payload_checksum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_checksum_);
  }
  if (from.session_size() != 0) {
    set_session_size(from.session_size());
  }
  if (from.data_store_size() != 0) {
    set_data_store_size(from.data_store_size());
  }
  if (from.unreliable_time() != 0) {
    set_unreliable_time(from.unreliable_time());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.checksum_type() != 0) {
    set_checksum_type(from.checksum_type());
  }
  if (from.compression_type() != 0) {
    set_compression_type(from.compression_type());
  }
}

void SnapshotHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.SnapshotHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotHeader::CopyFrom(const SnapshotHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.SnapshotHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotHeader::IsInitialized() const {
  return true;
}

void SnapshotHeader::Swap(SnapshotHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotHeader::InternalSwap(SnapshotHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  git_version_.Swap(&other->git_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_checksum_.Swap(&other->header_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_checksum_.Swap(&other->payload_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_size_, other->session_size_);
  swap(data_store_size_, other->data_store_size_);
  swap(unreliable_time_, other->unreliable_time_);
  swap(version_, other->version_);
  swap(checksum_type_, other->checksum_type_);
  swap(compression_type_, other->compression_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageBatch::InitAsDefaultInstance() {
}
class MessageBatch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBatch::kRequestsFieldNumber;
const int MessageBatch::kDeploymentIdFieldNumber;
const int MessageBatch::kSourceAddressFieldNumber;
const int MessageBatch::kBinVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBatch::MessageBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.MessageBatch)
}
MessageBatch::MessageBatch(const MessageBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source_address().size() > 0) {
    source_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  ::memcpy(&deployment_id_, &from.deployment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_ver_) -
    reinterpret_cast<char*>(&deployment_id_)) + sizeof(bin_ver_));
  // @@protoc_insertion_point(copy_constructor:raftpb.MessageBatch)
}

void MessageBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBatch_raft_2eproto.base);
  source_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&deployment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_ver_) -
      reinterpret_cast<char*>(&deployment_id_)) + sizeof(bin_ver_));
}

MessageBatch::~MessageBatch() {
  // @@protoc_insertion_point(destructor:raftpb.MessageBatch)
  SharedDtor();
}

void MessageBatch::SharedDtor() {
  source_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBatch& MessageBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBatch_raft_2eproto.base);
  return *internal_default_instance();
}


void MessageBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.MessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  source_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&deployment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_ver_) -
      reinterpret_cast<char*>(&deployment_id_)) + sizeof(bin_ver_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .raftpb.Message requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // uint64 deployment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_address(), ptr, ctx, "raftpb.MessageBatch.source_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bin_ver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bin_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageBatch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.MessageBatch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .raftpb.Message requests = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deployment_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deployment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_address().data(), static_cast<int>(this->source_address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.MessageBatch.source_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bin_ver = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bin_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.MessageBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.MessageBatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageBatch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.MessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raftpb.Message requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->requests(static_cast<int>(i)),
      output);
  }

  // uint64 deployment_id = 2;
  if (this->deployment_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->deployment_id(), output);
  }

  // string source_address = 3;
  if (this->source_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), static_cast<int>(this->source_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.MessageBatch.source_address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_address(), output);
  }

  // uint32 bin_ver = 4;
  if (this->bin_ver() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->bin_ver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.MessageBatch)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBatch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.MessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raftpb.Message requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->requests(static_cast<int>(i)), target);
  }

  // uint64 deployment_id = 2;
  if (this->deployment_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->deployment_id(), target);
  }

  // string source_address = 3;
  if (this->source_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), static_cast<int>(this->source_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.MessageBatch.source_address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->source_address(), target);
  }

  // uint32 bin_ver = 4;
  if (this->bin_ver() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->bin_ver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.MessageBatch)
  return target;
}

size_t MessageBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.MessageBatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftpb.Message requests = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // string source_address = 3;
  if (this->source_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  // uint64 deployment_id = 2;
  if (this->deployment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->deployment_id());
  }

  // uint32 bin_ver = 4;
  if (this->bin_ver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bin_ver());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.MessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.MessageBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.MessageBatch)
    MergeFrom(*source);
  }
}

void MessageBatch::MergeFrom(const MessageBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.MessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.source_address().size() > 0) {

    source_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  if (from.deployment_id() != 0) {
    set_deployment_id(from.deployment_id());
  }
  if (from.bin_ver() != 0) {
    set_bin_ver(from.bin_ver());
  }
}

void MessageBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.MessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBatch::CopyFrom(const MessageBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.MessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBatch::IsInitialized() const {
  return true;
}

void MessageBatch::Swap(MessageBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBatch::InternalSwap(MessageBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  source_address_.Swap(&other->source_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deployment_id_, other->deployment_id_);
  swap(bin_ver_, other->bin_ver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotChunk::InitAsDefaultInstance() {
  ::raftpb::_SnapshotChunk_default_instance_._instance.get_mutable()->membership_ = const_cast< ::raftpb::Membership*>(
      ::raftpb::Membership::internal_default_instance());
  ::raftpb::_SnapshotChunk_default_instance_._instance.get_mutable()->file_info_ = const_cast< ::raftpb::SnapshotFile*>(
      ::raftpb::SnapshotFile::internal_default_instance());
}
class SnapshotChunk::HasBitSetters {
 public:
  static const ::raftpb::Membership& membership(const SnapshotChunk* msg);
  static const ::raftpb::SnapshotFile& file_info(const SnapshotChunk* msg);
};

const ::raftpb::Membership&
SnapshotChunk::HasBitSetters::membership(const SnapshotChunk* msg) {
  return *msg->membership_;
}
const ::raftpb::SnapshotFile&
SnapshotChunk::HasBitSetters::file_info(const SnapshotChunk* msg) {
  return *msg->file_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotChunk::kClusterIdFieldNumber;
const int SnapshotChunk::kNodeIdFieldNumber;
const int SnapshotChunk::kFromFieldNumber;
const int SnapshotChunk::kChunkIdFieldNumber;
const int SnapshotChunk::kChunkSizeFieldNumber;
const int SnapshotChunk::kChunkCountFieldNumber;
const int SnapshotChunk::kDataFieldNumber;
const int SnapshotChunk::kIndexFieldNumber;
const int SnapshotChunk::kTermFieldNumber;
const int SnapshotChunk::kMembershipFieldNumber;
const int SnapshotChunk::kFilepathFieldNumber;
const int SnapshotChunk::kFileSizeFieldNumber;
const int SnapshotChunk::kDeploymentIdFieldNumber;
const int SnapshotChunk::kFileChunkIdFieldNumber;
const int SnapshotChunk::kFileChunkCountFieldNumber;
const int SnapshotChunk::kFileInfoFieldNumber;
const int SnapshotChunk::kBinVerFieldNumber;
const int SnapshotChunk::kOnDiskIndexFieldNumber;
const int SnapshotChunk::kWitnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotChunk::SnapshotChunk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftpb.SnapshotChunk)
}
SnapshotChunk::SnapshotChunk(const SnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.has_membership()) {
    membership_ = new ::raftpb::Membership(*from.membership_);
  } else {
    membership_ = nullptr;
  }
  if (from.has_file_info()) {
    file_info_ = new ::raftpb::SnapshotFile(*from.file_info_);
  } else {
    file_info_ = nullptr;
  }
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&witness_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(witness_));
  // @@protoc_insertion_point(copy_constructor:raftpb.SnapshotChunk)
}

void SnapshotChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotChunk_raft_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&membership_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&witness_) -
      reinterpret_cast<char*>(&membership_)) + sizeof(witness_));
}

SnapshotChunk::~SnapshotChunk() {
  // @@protoc_insertion_point(destructor:raftpb.SnapshotChunk)
  SharedDtor();
}

void SnapshotChunk::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete membership_;
  if (this != internal_default_instance()) delete file_info_;
}

void SnapshotChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotChunk& SnapshotChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotChunk_raft_2eproto.base);
  return *internal_default_instance();
}


void SnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:raftpb.SnapshotChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && membership_ != nullptr) {
    delete membership_;
  }
  membership_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && file_info_ != nullptr) {
    delete file_info_;
  }
  file_info_ = nullptr;
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&witness_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(witness_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chunk_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chunk_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chunk_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          chunk_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.Membership membership = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_membership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filepath = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filepath(), ptr, ctx, "raftpb.SnapshotChunk.filepath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 deployment_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_chunk_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          file_chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_chunk_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          file_chunk_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raftpb.SnapshotFile file_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_file_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bin_ver = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          bin_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 on_disk_index = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          on_disk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool witness = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          witness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotChunk::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftpb.SnapshotChunk)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 from = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 chunk_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 chunk_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 chunk_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.Membership membership = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_membership()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filepath = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raftpb.SnapshotChunk.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deployment_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deployment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_chunk_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_chunk_count = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_chunk_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raftpb.SnapshotFile file_info = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bin_ver = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bin_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 on_disk_index = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &on_disk_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool witness = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &witness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftpb.SnapshotChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftpb.SnapshotChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotChunk::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftpb.SnapshotChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
  }

  // uint64 chunk_id = 4;
  if (this->chunk_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->chunk_id(), output);
  }

  // uint64 chunk_size = 5;
  if (this->chunk_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->chunk_size(), output);
  }

  // uint64 chunk_count = 6;
  if (this->chunk_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->chunk_count(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // uint64 index = 8;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->index(), output);
  }

  // uint64 term = 9;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->term(), output);
  }

  // .raftpb.Membership membership = 10;
  if (this->has_membership()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::membership(this), output);
  }

  // string filepath = 12;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotChunk.filepath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->filepath(), output);
  }

  // uint64 file_size = 13;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->file_size(), output);
  }

  // uint64 deployment_id = 14;
  if (this->deployment_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->deployment_id(), output);
  }

  // uint64 file_chunk_id = 15;
  if (this->file_chunk_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->file_chunk_id(), output);
  }

  // uint64 file_chunk_count = 16;
  if (this->file_chunk_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(16, this->file_chunk_count(), output);
  }

  // .raftpb.SnapshotFile file_info = 17;
  if (this->has_file_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::file_info(this), output);
  }

  // uint32 bin_ver = 18;
  if (this->bin_ver() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->bin_ver(), output);
  }

  // uint64 on_disk_index = 19;
  if (this->on_disk_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(19, this->on_disk_index(), output);
  }

  // bool witness = 20;
  if (this->witness() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->witness(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftpb.SnapshotChunk)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotChunk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftpb.SnapshotChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
  }

  // uint64 chunk_id = 4;
  if (this->chunk_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->chunk_id(), target);
  }

  // uint64 chunk_size = 5;
  if (this->chunk_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->chunk_size(), target);
  }

  // uint64 chunk_count = 6;
  if (this->chunk_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->chunk_count(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // uint64 index = 8;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->index(), target);
  }

  // uint64 term = 9;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->term(), target);
  }

  // .raftpb.Membership membership = 10;
  if (this->has_membership()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::membership(this), target);
  }

  // string filepath = 12;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftpb.SnapshotChunk.filepath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->filepath(), target);
  }

  // uint64 file_size = 13;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->file_size(), target);
  }

  // uint64 deployment_id = 14;
  if (this->deployment_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->deployment_id(), target);
  }

  // uint64 file_chunk_id = 15;
  if (this->file_chunk_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->file_chunk_id(), target);
  }

  // uint64 file_chunk_count = 16;
  if (this->file_chunk_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->file_chunk_count(), target);
  }

  // .raftpb.SnapshotFile file_info = 17;
  if (this->has_file_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::file_info(this), target);
  }

  // uint32 bin_ver = 18;
  if (this->bin_ver() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->bin_ver(), target);
  }

  // uint64 on_disk_index = 19;
  if (this->on_disk_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->on_disk_index(), target);
  }

  // bool witness = 20;
  if (this->witness() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->witness(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftpb.SnapshotChunk)
  return target;
}

size_t SnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftpb.SnapshotChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string filepath = 12;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // .raftpb.Membership membership = 10;
  if (this->has_membership()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *membership_);
  }

  // .raftpb.SnapshotFile file_info = 17;
  if (this->has_file_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->from());
  }

  // uint64 chunk_id = 4;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  // uint64 chunk_size = 5;
  if (this->chunk_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->chunk_size());
  }

  // uint64 chunk_count = 6;
  if (this->chunk_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->chunk_count());
  }

  // uint64 index = 8;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 9;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 file_size = 13;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint64 deployment_id = 14;
  if (this->deployment_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->deployment_id());
  }

  // uint64 file_chunk_id = 15;
  if (this->file_chunk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_chunk_id());
  }

  // uint64 file_chunk_count = 16;
  if (this->file_chunk_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_chunk_count());
  }

  // uint64 on_disk_index = 19;
  if (this->on_disk_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->on_disk_index());
  }

  // uint32 bin_ver = 18;
  if (this->bin_ver() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bin_ver());
  }

  // bool witness = 20;
  if (this->witness() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raftpb.SnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.SnapshotChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.SnapshotChunk)
    MergeFrom(*source);
  }
}

void SnapshotChunk::MergeFrom(const SnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raftpb.SnapshotChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.has_membership()) {
    mutable_membership()->::raftpb::Membership::MergeFrom(from.membership());
  }
  if (from.has_file_info()) {
    mutable_file_info()->::raftpb::SnapshotFile::MergeFrom(from.file_info());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
  if (from.chunk_size() != 0) {
    set_chunk_size(from.chunk_size());
  }
  if (from.chunk_count() != 0) {
    set_chunk_count(from.chunk_count());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.deployment_id() != 0) {
    set_deployment_id(from.deployment_id());
  }
  if (from.file_chunk_id() != 0) {
    set_file_chunk_id(from.file_chunk_id());
  }
  if (from.file_chunk_count() != 0) {
    set_file_chunk_count(from.file_chunk_count());
  }
  if (from.on_disk_index() != 0) {
    set_on_disk_index(from.on_disk_index());
  }
  if (from.bin_ver() != 0) {
    set_bin_ver(from.bin_ver());
  }
  if (from.witness() != 0) {
    set_witness(from.witness());
  }
}

void SnapshotChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raftpb.SnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotChunk::CopyFrom(const SnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftpb.SnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotChunk::IsInitialized() const {
  return true;
}

void SnapshotChunk::Swap(SnapshotChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotChunk::InternalSwap(SnapshotChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(membership_, other->membership_);
  swap(file_info_, other->file_info_);
  swap(cluster_id_, other->cluster_id_);
  swap(node_id_, other->node_id_);
  swap(from_, other->from_);
  swap(chunk_id_, other->chunk_id_);
  swap(chunk_size_, other->chunk_size_);
  swap(chunk_count_, other->chunk_count_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(file_size_, other->file_size_);
  swap(deployment_id_, other->deployment_id_);
  swap(file_chunk_id_, other->file_chunk_id_);
  swap(file_chunk_count_, other->file_chunk_count_);
  swap(on_disk_index_, other->on_disk_index_);
  swap(bin_ver_, other->bin_ver_);
  swap(witness_, other->witness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raftpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raftpb::Bootstrap_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::raftpb::Bootstrap_AddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Bootstrap_AddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Bootstrap* Arena::CreateMaybeMessage< ::raftpb::Bootstrap >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Bootstrap >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::RaftDataStatus* Arena::CreateMaybeMessage< ::raftpb::RaftDataStatus >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::RaftDataStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::State* Arena::CreateMaybeMessage< ::raftpb::State >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::State >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Entry* Arena::CreateMaybeMessage< ::raftpb::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::EntryBatch* Arena::CreateMaybeMessage< ::raftpb::EntryBatch >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::EntryBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Membership_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::raftpb::Membership_AddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Membership_AddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Membership_RemovedEntry_DoNotUse* Arena::CreateMaybeMessage< ::raftpb::Membership_RemovedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Membership_RemovedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Membership_ObserversEntry_DoNotUse* Arena::CreateMaybeMessage< ::raftpb::Membership_ObserversEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Membership_ObserversEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Membership_WitnessesEntry_DoNotUse* Arena::CreateMaybeMessage< ::raftpb::Membership_WitnessesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Membership_WitnessesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Membership* Arena::CreateMaybeMessage< ::raftpb::Membership >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Membership >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::SnapshotFile* Arena::CreateMaybeMessage< ::raftpb::SnapshotFile >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::SnapshotFile >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Snapshot* Arena::CreateMaybeMessage< ::raftpb::Snapshot >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::Message* Arena::CreateMaybeMessage< ::raftpb::Message >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::ConfigChange* Arena::CreateMaybeMessage< ::raftpb::ConfigChange >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::ConfigChange >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::SnapshotHeader* Arena::CreateMaybeMessage< ::raftpb::SnapshotHeader >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::SnapshotHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::MessageBatch* Arena::CreateMaybeMessage< ::raftpb::MessageBatch >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::MessageBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::raftpb::SnapshotChunk* Arena::CreateMaybeMessage< ::raftpb::SnapshotChunk >(Arena* arena) {
  return Arena::CreateInternal< ::raftpb::SnapshotChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
